{"version":3,"sources":["kee_frame/controller.cljc"],"mappings":"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","names":["kee-frame.controller/process-params","params","route","cljs.core/vector?","cljs.core.get_in","cljs.core/ifn?","kee-frame.controller/validate-and-dispatch!","dispatch","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.core.ex_info","cljs.spec.alpha/explain-data","p__48409","map__48410","cljs.core/--destructure-map","cljs.core.get","kee-frame.controller/stop-controller","ctx","stop","controller","p__48411","map__48412","kee-frame.controller/start-controller","last-params","start","cljs.core.conj","kee-frame.controller/controller-actions","controllers","cljs.core.reduce","p__48416","map__48417","actions","id","current-params","ocr-48418","cljs.core.match/backtrack","e48454","js/Error","e__47465__auto__","e48456","e48457","e48455","cljs.core._EQ_","cljs.core.update","cljs.core/conj","kee-frame.controller/update-controllers","new-controllers","id->new-controller","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","p__48464","map__48465","temp__5751__auto__","updated-controller","cljs.core.assoc","re_frame.core.reg_event_fx","p__48473","vec__48474","cljs.core.nth","_","dispatches","kee-frame.controller/controller-effects","map__48484","start-dispatches","p1__48480#","stop-dispatches","p1__48481#","dispatch-n","cljs.core/seq","cljs.core.concat","re-frame.core/reg-fx","cljs.core.swap_BANG_","kee-frame.state/controllers"],"sourcesContent":["(ns ^:no-doc kee-frame.controller\n  (:require\n   #?(:cljs\n      [cljs.core.match :refer [match]])\n   #?(:clj\n      [clojure.core.match :refer [match]])\n   [kee-frame.state :as state]\n   [kee-frame.spec :as spec]\n   [clojure.spec.alpha :as s]\n   [expound.alpha :as e]\n   [taoensso.timbre :as log]\n   [re-frame.core :as rf]))\n\n(defn process-params [params route]\n  (cond\n    (vector? params) (get-in route params)\n    (ifn? params) (params route)))\n\n(defn validate-and-dispatch! [dispatch]\n  (when dispatch\n    (log/debug \"Dispatch returned from controller function \" dispatch)\n    (do\n      (when-not (s/valid? ::spec/event-vector dispatch)\n        (e/expound ::spec/event-vector dispatch)\n        (throw (ex-info \"Invalid dispatch value\"\n                        (s/explain-data ::spec/event-vector dispatch))))\n      dispatch)))\n\n(defn stop-controller [ctx {:keys [stop] :as controller}]\n  (log/debug {:type       :controller-stop\n              :controller controller\n              :ctx        ctx})\n  (cond\n    (vector? stop) stop\n    (ifn? stop) (validate-and-dispatch! (stop ctx))))\n\n(defn start-controller [ctx {:keys [last-params start] :as controller}]\n  (log/debug {:type       :controller-start\n              :controller controller\n              :ctx        ctx})\n  (when start\n    (cond\n      (vector? start) (conj start last-params)\n      (ifn? start) (validate-and-dispatch! (start ctx last-params)))))\n\n(defn controller-actions [controllers route]\n  (reduce (fn [actions {:keys [id last-params params start stop]}]\n            (let [current-params (process-params params route)\n                  controller     {:id          id\n                                  :start       start\n                                  :stop        stop\n                                  :last-params current-params}]\n              (match [last-params current-params (= last-params current-params)]\n                     [_ _ true] actions\n                     [nil _ false] (update actions :start conj controller)\n                     [_ nil false] (update actions :stop conj controller)\n                     [_ _ false] (-> actions\n                                     (update :stop conj controller)\n                                     (update :start conj controller)))))\n          {}\n          controllers))\n\n(defn update-controllers [controllers new-controllers]\n  (let [id->new-controller (->> new-controllers\n                                (map (juxt :id identity))\n                                (into {}))]\n    (map (fn [{:keys [id] :as controller}]\n           (if-let [updated-controller (id->new-controller id)]\n             (assoc controller :last-params (:last-params updated-controller))\n             controller))\n         controllers)))\n\n(rf/reg-event-fx ::start-controllers\n  (fn [_ [_ dispatches]]\n    ;; Another dispatch to make sure all controller stop commands are processed before the starts\n    {:dispatch-n dispatches}))\n\n(defn controller-effects [controllers ctx route]\n  (let [{:keys [start stop]} (controller-actions controllers route)\n        start-dispatches (map #(start-controller ctx %) start)\n        stop-dispatches  (map #(stop-controller ctx %) stop)\n        dispatch-n       (cond\n                           (and (seq start) (seq stop)) (conj stop-dispatches\n                                                              [::start-controllers start-dispatches])\n                           (seq start) start-dispatches\n                           (seq stop) stop-dispatches)]\n    {:update-controllers (concat start stop)\n     :dispatch-n         dispatch-n}))\n\n(rf/reg-fx :update-controllers\n  (fn [new-controllers]\n    (swap! state/controllers update-controllers new-controllers)))\n"]}