{"version":3,"sources":["kee_frame/scroll.cljs"],"mappings":";AAMA,yDAAA,zDAACA,yKACgB,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;YAAT,AAAAF,4CAAAD,WAAA,IAAA,nEAAWI;iBAAX,AAAAH,4CAAAD,WAAA,IAAA,xEAAiBK;AAAjB,4EACMH,nBACA,sBAAA,mFAAA,wEAAA,jLAACI,+OAAiCF,xSAClC,+SAAA,mFAAA,wEAAA,ncAACG,qgBAAqCF;;AAE7D,+BAAA,/BAAMG;AAAN,AACE,OAACC;;AAEH,0CAAA,1CAAMC,4FAAmBN;AAAzB,AACE,AAACO,+BAAqB,AAAA,mFAAOP;;AAC7B,OAACQ,mDAAMC,+BACA,WAAKC;AAAL,AACE,OAACC,6CAAK,+CAAA,WAAAC,1DAACC;AAAD,AAAS,uDAAA,hDAACC,oEAAyB,AAAA,mFAAAF;GAAWF,cAC9C,iBAAAK,WAAA,2CAAA,qDAAA,oBAAA,2DACgC,WAAKE;AAAL,AACE,uBAAA,mFAAA,1GAACC,0NAAkClB,MAAMmB;;AACzCF;GAHlC,8DAIgC,WAAKG;AAAL,AACE,uBAAA,mFAAA,1GAACF,0NAAkClB,MAAMqB;;AACzCD;;AANlC,AAAA,wHAAAL,+CAAAA,/JAACC,yDAAAA,mEAAAA;;;;AAQlB,yDAAA,zDAACM,kJACgB,WAAKvB,EAAEA;AAAP,AACE,AAACwB,0BAAeC;;AADlB;;AAIjB,yDAAA,zDAACF,8IACgB,WAAAG,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAa7B;IAAbgC,aAAAJ;QAAA,AAAA7B,4CAAAiC,WAAA,IAAA,/DAAmB/B;mBAAnB,AAAAF,4CAAAiC,WAAA,IAAA,1EAAqBC;cAArB,AAAAlC,4CAAAiC,WAAA,IAAA,rEAAkCE;AAAlC,AACE,IAAAC,aAA8B,AAAA,sGAAgBnC;IAA9CmC,iBAAA,AAAAL,4BAAAK;YAAA,AAAAJ,4CAAAI,eAAA,nEAAcjC;cAAd,AAAA6B,4CAAAI,eAAA,rEAAoBC;AAApB,AACE,GAAM,AAACC,6CAAEnC,MAAM+B;AAAf,AACE,GACE,GAAK,WAAA,VAAMG;AADb,kDAAA,6DAAA,mFAAA;;AAAA,GAEE,WAAA,VAAMA;AAFR,kDAAA,wEAAA,mFAAA,2CAAA,kDAAA,KAAA,6DAAA,mFAAA,qFAGsDH,aAAa,WAAA,VAAKC;;AAHxE,GAIE,CAAA,OAAMA;AAJR,kDAAA,gDAIsB,iDAAA,wEAAA,zHAACI,8CAAMtC;;AAJ7B;;;;;AADF","names":["re_frame.core.reg_event_db","p__45446","vec__45447","cljs.core.nth","db","_","route","inc-or-dec","cljs.core/assoc-in","cljs.core.update_in","kee-frame.scroll/start!","clerk.core/initialize!","kee-frame.scroll/monitor-requests!","clerk.core/navigate-page!","cljs.core.swap_BANG_","ajax.core/default-interceptors","interceptors","cljs.core.conj","p1__45453#","cljs.core.filter","cljs.core.not_EQ_","G__45463","ajax.core/to-interceptor","request","re-frame.core/dispatch","cljs.core/inc","response","cljs.core/dec","re_frame.core.reg_event_fx","reagent.core/after-render","clerk.core/after-render!","p__45472","p__45473","map__45477","cljs.core/--destructure-map","cljs.core.get","vec__45478","active-route","counter","map__45485","balance","cljs.core._EQ_","cljs.core.assoc"],"sourcesContent":["(ns ^:no-doc kee-frame.scroll\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [reagent.core :as r]\n            [clerk.core :as clerk]))\n\n(rf/reg-event-db ::connection-balance\n                 (fn [db [_ route inc-or-dec]]\n                   (-> db\n                       (assoc-in [:route-counter :route] route)\n                       (update-in  [:route-counter :balance] inc-or-dec))))\n\n(defn start! []\n  (clerk/initialize!))\n\n(defn monitor-requests! [route]\n  (clerk/navigate-page! (:path route))\n  (swap! ajax/default-interceptors\n         (fn [interceptors]\n           (conj (filter #(not= \"route-interceptor\" (:name %)) interceptors)\n                 (ajax/to-interceptor {:name     \"route-interceptor\"\n                                       :request  (fn [request]\n                                                   (rf/dispatch [::connection-balance route inc])\n                                                   request)\n                                       :response (fn [response]\n                                                   (rf/dispatch [::connection-balance route dec])\n                                                   response)})))))\n\n(rf/reg-event-fx ::scroll\n                 (fn [_ _]\n                   (r/after-render clerk/after-render!)\n                   nil))\n\n(rf/reg-event-fx ::poll\n                 (fn [{:keys [db]} [_ active-route counter]]\n                   (let [{:keys [route balance]} (:route-counter db)]\n                     (when (= route active-route)\n                       (cond\n                         (not (pos? balance)) {:dispatch [::scroll]}\n                         (pos? balance) {:dispatch-later [{:ms       50\n                                                           :dispatch [::poll active-route (inc counter)]}]}\n                         (< 20 counter) {:db (assoc db :route-counter nil)})))))\n\n"]}