{"version":3,"sources":["eykt/spa.cljs"],"mappings":";AAIA,sBAAA,mFAAA,mFAAA,IAAA,2CAAA,qDAAA,4DAAA,wDAAA,pZAAKA;AAGL,sBAAA,tBAAOC,oDACJC,GAAGC;AADN,AAEE,OAACC,6CAAKF,GACA,AAACG,6CAAK,AAACC,uBACD,iBAAAC,WAAS,AAAUC,qBAAgBL;AAAnC,AAAA,GAAA,CAAAI,YAAA;AAAA;;AACS,6DAAAA,tDAACE;;;;AAExB,8BAAA,2CAAA,mEAAA,mFAAA,yDAAA,MAAA,yDAAA,MAAA,wEAAA,OAAA,gFAAA,oEAAA,hkBAAKC;AAIL,oBAAA,2CAAA,2DAAA,KAAA,mEAAA,2CAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,zRAAKC;AAIL,uBAAA,2CAAA,4DAAA,mFAAA,mDAAA,pQAAKC;AAGL,yBAAA,zBAAMC;AAAN,AAEE,IAAMC,QAAM,sDAAA,mFAAA,zIAACC;IACPC,aAAW,AAAA,mFAAA,AAAA,mFAAA,AAAAC,gBAAKH;IAGhBI,cAAY,iBAAAC,qBAAgB,AAACE,4CAAIT,qBAAYI;AAAjC,AAAA,oBAAAG;AAAA,AAAA,WAAAA,PAAWC;AAAX,AACE,kDAAA,AAAAH,3CAACK,sCAAsCF,qBAAMN;;AAD/C;;;AAJlB,AAAA,0FAAA,mDAiBQI;;AAEV;;;uBAAA,vBAAMK,sDAEHC;AAFH,AAGE,sBAAA,lBAAMC;IACAC,OAAK,uCAAA,tCAAM,8BAAA,9BAAuBC;IAClCC,OAAK,uCAAA,tCAAM,8BAAA,9BAAuBD;AAFxC,AAGE,kBAAA,lBAAeD,0BAAa,sHAAA,OAAA,3HAAI,6CAAA,7CAACG,kGAAQJ;;AAIzC,kBAAA,QAAA,1BAAeG;;AAGfJ","names":["eykt.spa/app-routes","eykt.spa/initialize","db","ls-key","cljs.core.conj","cljs.core.into","cljs.core/sorted-map","G__50000","js/localStorage","cljs.reader.read_string","eykt.spa/screen-breakpoints","eykt.spa/start-db","eykt.spa/route-table","eykt.spa/dispatch-main","route","re_frame.core.subscribe","route-name","cljs.core/deref","web-content","temp__5753__auto__","page","cljs.core.get","kee-frame.router/make-route-component","eykt.spa/app-wrapper","content","user-screenmode","html","js/document","body","cljs.core._EQ_"],"sourcesContent":["(ns eykt.spa\n  (:require [cljs.reader :refer [read-string]]\n            [re-frame.core :as rf]))\n\n(def app-routes\n  [[\"/\" {:name :r.common :header \"Forsiden\"}]])\n\n(defn- initialize\n  [db ls-key]\n  (conj db\n        (into (sorted-map)\n              (some->> (.getItem js/localStorage ls-key)\n                       (read-string)))))\n\n(def screen-breakpoints\n  {:breakpoints [:mobile 640 :tablet 992 :small-monitor 1200 :large-monitor],\n   :debounce-ms 166})\n\n(def start-db\n  {:startup true,\n   :app/show-help {1 false, 2 false, 5 false, 6 false, 9 true}})\n\n(def route-table\n  {:r.common               [:div \"EYKT home\"]})\n\n(defn dispatch-main\n  []\n  (let [route (rf/subscribe [:kee-frame/route])\n        route-name (-> @route\n                       :data\n                       :name)\n        web-content (when-let [page (get route-table route-name)]\n                      (kee-frame.router/make-route-component page @route))]\n    #_[writing-mode? (rf/subscribe [:writing-mode?])\n       mobile? (rf/subscribe [:breaking-point.core/mobile?])\n       menu-open? (rf/subscribe [:menu-open?])\n       route (rf/subscribe [:kee-frame/route])\n       route-name (-> @route\n                      :data\n                      :name)\n       web-content (when-let [page (get torv.routes/route-table route-name)]\n                     (kee-frame.router/make-route-component page @route))\n       editor (torv.screen/my-editor (r/atom nil))]\n    #_(forced-scroll-lock (and @mobile? @menu-open?))\n    [:div web-content]))\n\n(defn app-wrapper\n  \"takes care of light/dark-mode and loading-states\"\n  [content]\n  (let [user-screenmode :dark #_@(rf/subscribe [:user-screenmode])\n        html (aget (.getElementsByTagName js/document \"html\") 0)\n        body (aget (.getElementsByTagName js/document \"body\") 0)]\n    (.setAttribute html \"class\" (if (= :dark user-screenmode) \"dark\" \"\"))\n    ;(.setAttribute html \"style\" \"height: 100%\")\n    ;(.setAttribute body \"style\" \"height: 100%\")\n    ;{:class (get-in s/color-map [:main :content :bg])}\n    (.setAttribute body\n                   \"class\"\n                   \"font-sans inter bg-gray-100 dark:bg-gray-800 min-h-screen\")\n    content))"]}