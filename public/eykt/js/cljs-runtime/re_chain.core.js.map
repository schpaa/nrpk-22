{"version":3,"sources":["re_chain/core.cljc"],"mappings":"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","names":["re-chain.core/*replace-pointers*","re-chain.core/links","cljs.core.atom","re-chain.core/seqify","x","cljs.core/sequential?","cljs.core/set?","re-chain.core/step-id","event-id","counter","cljs.core._EQ_","cljs.core.keyword","cljs.core/namespace","cljs.core/name","re-chain.core/replace-pointers","next-event","effects","clojure.walk/postwalk","re_frame.core.console","fexpr__41796","re-chain.core/single-valid-link","links","cljs.core/deref","cljs.core.filter","p__41799","map__41800","cljs.core/--destructure-map","cljs.core.get","get-dispatch","effect-present?","and__4251__auto__","cljs.core/not","cljs.core/count","cljs.core/first","re-chain.core/dispatch-empty-or-next","next-event-id","event","cljs.core.assoc","re-chain.core/single-valid-next","xs","p__41804","map__41805","re-chain.core/select-link","or__4253__auto__","cljs.core.ex_info","p__41806","vec__41807","seq__41808","cljs.core/seq","first__41809","cljs.core/next","re-chain.core/make-event","previous-event-params","_","params","cljs.core.into","cljs.core.concat","re-chain.core/link-effects","event-params","temp__5751__auto__","map__41810","set-dispatch","G__41811","G__41812","re-chain.core/effect-postprocessor","ctx","cljs.core/rest","re_frame.core.get_coeffect","p1__41814#","cljs.core.update","G__41815","re-chain.core/chain-interceptor","current-event-id","re_frame.core.__GT_interceptor","re-chain.core/conform-named-handlers","handlers","G__41823","vec__41824","seq__41825","first__41826","vec__41865","seq__41866","first__41867","id","interceptors-or-handler","rest","matches","cljs.core/fn?","cljs.core.conj","vec__41879","seq__41880","first__41881","handler","re-chain.core/collect-named-event-instructions","step-fns","chain-handlers","cljs.core.partition","cljs.core.map","p__41892","vec__41893","map__41896","cljs.core.nth","interceptors","handler-1","handler-2","next-id","G__41899","re-chain.core/conform-handlers","G__41908","vec__41909","seq__41910","first__41911","vec__41922","seq__41923","first__41924","vec__41925","seq__41926","first__41927","re-chain.core/collect-event-instructions","key","cljs.core.map_indexed","p__41933","vec__41936","current-handler","next-handler","map__41939","fn","re-chain.core/register-chain-handlers!","instructions","user-interceptors","seq__41945","chunk__41946","count__41947","i__41948","map__41956","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__41957","event-handler","interceptor","re_frame.core.reg_event_fx","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","re-chain.core/reg-chain-named*","seq41961","G__41962","self__4851__auto__","G__41963","re-chain.core/reg-chain*","seq41969","G__41970","G__41971","G__41978","re-chain.core/configure!","chain-links","cljs.core/reset!","re-chain.core/reg-chain-named","seq41980","self__4852__auto__","cljs.core.apply","re-chain.core/reg-chain","seq41982","G__41983"],"sourcesContent":["(ns re-chain.core\n  (:require [clojure.walk :as walk]\n            [re-frame.core :as rf]))\n\n(def ^:dynamic *replace-pointers* false)\n\n(def links (atom []))\n\n(defn seqify [x]\n  (if (or (sequential? x) (set? x))\n    x\n    [x]))\n\n(defn step-id [event-id counter]\n  (if (= 0 counter)\n    event-id\n    (keyword\n     (str (namespace event-id)\n          (if (namespace event-id) \"/\")\n          (name event-id)\n          \"-\" counter))))\n\n(defn replace-pointers [next-event effects]\n  (walk/postwalk\n    (fn [x]\n      (when (= x :kee-frame.core/next)\n        (rf/console :warn \"Keyword :kee-frame.core/next is deprecated, use :chain/next instead.\"))\n      (if (#{:kee-frame.core/next :chain/next} x)\n        next-event\n        x))\n    effects))\n\n(defn single-valid-link [effects]\n  (let [links (->> @links\n                   (filter (fn [{:keys [get-dispatch effect-present?]}]\n                             (and (effect-present? effects)\n                                  (not (get-dispatch effects))))))]\n    (when (= 1 (count links))\n      (first links))))\n\n(defn dispatch-empty-or-next [effects next-event-id]\n  (when (or (not (:dispatch effects))\n            (-> effects\n                :dispatch\n                first\n                (= next-event-id)))\n    {:get-dispatch :dispatch\n     :set-dispatch (fn [effects event] (assoc effects :dispatch event))}))\n\n(defn single-valid-next [next-event-id effects]\n  (let [xs (->> @links\n                (filter (fn [{:keys [get-dispatch]}]\n                          (= next-event-id\n                             (-> effects get-dispatch first)))))]\n    (when (= 1 (count xs))\n      (first xs))))\n\n(defn select-link [next-event-id effects]\n  (or\n    (single-valid-next next-event-id effects)\n    (single-valid-link effects)\n    (dispatch-empty-or-next effects next-event-id)\n    (throw\n      (ex-info \"Not possible to select next in chain\"\n               {:next-id  next-event-id\n                :dispatch (:dispatch effects)\n                :links    @links}))))\n\n(defn make-event [next-event-id previous-event-params [_ & params]]\n  (into [next-event-id] (concat previous-event-params params)))\n\n(defn link-effects [next-event-id event-params effects]\n  (if next-event-id\n    (if-let [{:keys [set-dispatch get-dispatch]} (select-link next-event-id effects)]\n      (set-dispatch effects (make-event next-event-id event-params (get-dispatch effects)))\n      effects)\n    effects))\n\n(defn effect-postprocessor [next-event-id]\n  (fn [ctx]\n    (let [event-params (rest (rf/get-coeffect ctx :event))]\n      (update ctx :effects #(cond->> %\n                                     *replace-pointers* (replace-pointers next-event-id)\n                                     true (link-effects next-event-id event-params))))))\n\n(defn chain-interceptor [current-event-id next-event-id]\n  (rf/->interceptor\n   :id current-event-id\n   :after (effect-postprocessor next-event-id)))\n\n(defn conform-named-handlers [handlers]\n  (loop [[id interceptors-or-handler & rest] handlers\n         matches []]\n    (if id\n      (if (fn? interceptors-or-handler)\n        (recur rest (conj matches {:id id\n                                   :fn interceptors-or-handler}))\n        (let [[handler & rest] rest]\n          (if (fn? handler)\n            (recur rest (conj matches {:id           id\n                                       :interceptors interceptors-or-handler\n                                       :fn           handler}))\n            (throw (ex-info \"No valid handler found for \" {:id           id\n                                                           :interceptors interceptors-or-handler\n                                                           :handler      handler})))))\n      matches)))\n\n(defn collect-named-event-instructions [step-fns]\n  (let [chain-handlers (conform-named-handlers step-fns)]\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map (fn [[{:keys [id interceptors] :as handler-1} handler-2]]\n                (let [next-id (:id handler-2)]\n                  (assoc handler-1 :next-id next-id\n                                   :interceptors (some-> interceptors seqify)\n                                   :event-handler (:fn handler-1)\n                                   :interceptor (chain-interceptor id next-id))))))))\n\n(defn conform-handlers [handlers]\n  (loop [[interceptors-or-handler & rest] handlers\n         matches []]\n    (if interceptors-or-handler\n      (if (fn? interceptors-or-handler)\n        (recur rest (conj matches {:fn interceptors-or-handler}))\n        (let [[handler & rest] rest]\n          (if (fn? handler)\n            (recur rest (conj matches {:interceptors interceptors-or-handler\n                                       :fn           handler}))\n            (throw (ex-info \"Interceptor without matching handler\" {:interceptors interceptors-or-handler\n                                                                    :handler      handler})))))\n      matches)))\n\n(defn collect-event-instructions [key step-fns]\n  (let [chain-handlers (conform-handlers step-fns)]\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map-indexed (fn [counter [current-handler next-handler]]\n                        (let [{:keys [fn interceptors]} current-handler\n                              id      (step-id key counter)\n                              next-id (when next-handler (step-id key (inc counter)))]\n                          {:id            id\n                           :next-id       next-id\n                           :event-handler fn\n                           :interceptors  interceptors\n                           :interceptor   (chain-interceptor id next-id)}))))))\n\n(defn register-chain-handlers! [instructions user-interceptors]\n  (doseq [{:keys [id event-handler interceptor interceptors]} instructions]\n    (rf/reg-event-fx id (into [interceptor] (concat user-interceptors interceptors)) event-handler)))\n\n(defn reg-chain-named*\n  \"Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [interceptors & step-fns]\n  (let [instructions (collect-named-event-instructions step-fns)]\n    (register-chain-handlers! instructions (some-> interceptors seqify))))\n\n(defn reg-chain*\n  \"Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [id interceptors & step-fns]\n  (let [instructions (collect-event-instructions id step-fns)]\n    (register-chain-handlers! instructions (some-> interceptors seqify))))\n\n(defn configure!\n  \"re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  \"\n  [chain-links]\n  (reset! links chain-links))\n\n(defn reg-chain-named\n  \"Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler. Optionally with interceptors between id and handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \\\"...\\\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [& handlers]\n  (apply reg-chain-named* nil handlers))\n\n(defn reg-chain\n  \"Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`. Interceptors can be\n              specified before the handler, same as with normal event handlers.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \\\"/customer/\\\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [id & handlers]\n  (apply reg-chain* id nil handlers))"]}