{"version":3,"sources":["kee_frame/legacy.cljc"],"mappings":"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","names":["kee-frame.legacy/kee-frame-interceptors","kee-frame.event-logger/interceptor","re-frame.core/trim-v","kee-frame.legacy/reg-warn","id","var_args","G__48423","kee-frame.legacy/reg-event-fx","js/Error","handler","kee_frame.legacy.reg_event_fx","interceptors","re_frame.core.reg_event_fx","cljs.core.concat","G__48446","kee-frame.legacy/reg-event-db","kee_frame.legacy.reg_event_db","re_frame.core.reg_event_db","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","kee-frame.legacy/reg-chain","seq48451","G__48452","cljs.core/first","cljs.core/next","self__4851__auto__","handlers","cljs.core.apply","re-chain.core/reg-chain*","kee-frame.legacy/reg-chain-named","seq48462","self__4852__auto__","cljs.core/seq","re-chain.core/reg-chain-named*"],"sourcesContent":["(ns kee-frame.legacy\n  (:require [kee-frame.event-logger :as event-logger]\n            [re-chain.core :as chain]\n            [re-frame.core :as rf :refer [console]]))\n\n;; Interceptors used by all chains and events registered through kee-frame\n(def kee-frame-interceptors [event-logger/interceptor rf/trim-v])\n\n(defn- reg-warn [id]\n  ;; This warning will kick in somewhere along 1.x\n  ;;(console :warn (str id  \" kee-frame.core/reg-* have been deprecated. Use the corresponding re-frame and re-chain ones instead, and apply the global interceptors you need through kee-frame.core/start! instead.\"))\n  )\n\n(defn reg-event-fx\n  \"Exactly same signature as `re-frame.core/reg-event-fx`. Use this version if you want kee-frame logging and spec validation.\n\n  `re-frame.core/trim-v` interceptor is also applied.\"\n  ([id handler] (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (reg-warn id)\n   (rf/reg-event-fx id (concat kee-frame-interceptors interceptors) handler)))\n\n(defn reg-event-db\n  \"Exactly same signature as `re-frame.core/reg-event-db`. Use this version if you want kee-frame logging and spec validation.\n\n  `re-frame.core/trim-v` interceptor is also applied.\"\n  ([id handler] (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (reg-warn id)\n   (rf/reg-event-db id (concat kee-frame-interceptors interceptors) handler)))\n\n(defn reg-chain\n  \"Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `kee-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri    (str \\\"/customer/\\\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [id & handlers]\n  (reg-warn id)\n  (apply chain/reg-chain* id kee-frame-interceptors handlers))\n\n(defn reg-chain-named\n  \"Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \\\"...\\\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [& handlers]\n  (reg-warn \"\")\n  (apply chain/reg-chain-named* kee-frame-interceptors handlers))"]}