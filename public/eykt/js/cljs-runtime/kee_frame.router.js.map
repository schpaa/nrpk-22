{"version":3,"sources":["kee_frame/router.cljc"],"mappings":"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","names":["kee-frame.router/default-chain-links","effects","cljs.core.get_in","dispatch","cljs.core/assoc-in","kee-frame.router/url","data","cljs.core/deref","kee-frame.state/router","cljs.core.ex_info","kee-frame.api/data->url","kee-frame.router/goto","kee-frame.api/navigate!","kee-frame.state/navigator","kee-frame.router/nav-handler","router","route-change-event","path","temp__5751__auto__","route","kee-frame.api/url->data","re-frame.core/dispatch","or__4253__auto__","re_frame.core.console","re-frame.core/console","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__49829","cljs.core/map?","i__13468__auto__","v__13469__auto__","cljs.core.nth","cljs.core/any?","kee-frame.router/assert-route-data","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.spec.alpha/explain-data","kee-frame.router/url-not-found","routes","kee-frame.router/route-match-not-found","url","p__49831","map__49832","cljs.core/--destructure-map","cljs.core.get","kee-frame.router/valid?","path-params","required","clojure.set/subset?","cljs.core/set","cljs.core/keys","kee-frame.router/match-data","hash?","vec__49833","map__49836","_","match","cljs.core.apply","reitit.core/match-by-name","temp__5757__auto__","q","h","kee-frame.router/match-url","vec__49838","vec__49841","path+query","fragment","clojure.string/replace","clojure.string.split","query","G__49844","reitit.core/match-by-path","cljs.core.assoc","this__4502__auto__","k__4503__auto__","this__4504__auto__","k49847","else__4505__auto__","G__49851","cljs.core/Keyword","not-found","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__49853","vec__49854","k__4526__auto__","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__49846","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this49848","other49849","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4509__auto__","G__49863","this__4510__auto__","k__4511__auto__","pred__49864","cljs.core/keyword-identical?","expr__49865","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","kee-frame.router/ReititRouter","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__49850","extmap__4542__auto__","G__49868","cljs.core/record?","kee-frame.router/->ReititRouter","kee-frame.router/map->ReititRouter","G__49862","p__49870","map__49871","kee-frame.router/bootstrap-routes","hash-routing?","scroll","initialized?","cljs.core/boolean","reitit.core.router","cljs.core/reset!","re-frame.core/reg-fx","kee-frame.scroll/start!","p1__49869#","kee-frame.interop/make-navigator","kee-frame.api/dispatch-current!","re_frame.core.reg_event_db","p__49873","vec__49874","db","initial","cljs.core.merge","kee-frame.router/reg-route-event","re_frame.core.reg_event_fx","kee-frame.event-logger/interceptor","p__49877","p__49878","map__49879","vec__49880","ctx","kee-frame.scroll/monitor-requests!","map__49883","update-controllers","dispatch-n","kee-frame.controller/controller-effects","kee-frame.state/controllers","G__49884","p__49885","map__49886","kee-frame.router/deprecations","debug?","debug-config","p__49888","map__49889","kee-frame.router/start!","initial-db","app-db-spec","root-component","chain-links","screen","global-interceptors","log-spec-error","config","re-frame.core/reg-global-interceptor","kee-frame.spec/spec-interceptor","seq__49890","chunk__49891","count__49892","i__49893","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","i","re-chain.core/configure!","and__4251__auto__","re-frame.core/dispatch-sync","cljs.core/boolean?","kee-frame.state/breakpoints-initialized?","kee-frame.interop/set-breakpoint-subs","kee-frame.interop/set-breakpoints","re_frame.core.reg_sub","kee-frame.interop/render-root","kee-frame.router/make-route-component","component","cljs.core/fn?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","kee-frame.router/case-route","seq49895","G__49896","self__4851__auto__","f","pairs","re_frame.core.subscribe","dispatch-value","G__49898","G__49902","vec__49903","seq__49904","first__49905","vec__49907","seq__49908","first__49909","first-pair","rest-pairs","cljs.core.partition_all","G__49912","vec__49914","value","G__49917","kee-frame.router/switch-route","seq49918","G__49919","cljs.core/even?","G__49920","G__49924","vec__49925","seq__49926","first__49927","vec__49928","seq__49929","first__49930","cljs.core.partition","vec__49931"],"sourcesContent":["(ns ^:no-doc kee-frame.router\n  (:require [kee-frame.interop :as interop]\n            [re-frame.core :as rf :refer [console]]\n            [re-chain.core :as chain]\n            [kee-frame.event-logger :as event-logger]\n            [kee-frame.api :as api :refer [dispatch-current! navigate! url->data data->url]]\n            [kee-frame.interop :as interop]\n            [kee-frame.spec :as spec]\n            [kee-frame.state :as state]\n            [kee-frame.scroll :as scroll]\n            [kee-frame.controller :as controller]\n            [reitit.core :as reitit]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [expound.alpha :as e]\n            [re-frame.core :as f]\n            [clojure.set :as set]))\n\n(def default-chain-links [{:effect-present? (fn [effects] (:http-xhrio effects))\n                           :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                           :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n\n(defn url [data]\n  (when-not @state/router\n    (throw (ex-info \"No router defined for this app\" {:router @state/router})))\n  (data->url @state/router data))\n\n(defn goto [data]\n  (navigate! @state/navigator (url data)))\n\n(defn nav-handler [router route-change-event]\n  (fn [path]\n    (if-let [route (url->data router path)]\n      (rf/dispatch [(or route-change-event ::route-changed) route])\n      (do (rf/console :group \"No route match found\")\n          (rf/console :error \"No match found for path \" path)\n          (rf/console :groupEnd)))))\n\n(s/def ::reitit-route-data (s/cat :route-name keyword? :path-params (s/* (s/map-of keyword? any?))))\n\n(defn assert-route-data [data]\n  (when-not (s/valid? ::reitit-route-data data)\n    (e/expound ::reitit-route-data data)\n    (throw (ex-info \"Bad route data input\" (s/explain-data ::reitit-route-data data)))))\n\n(defn url-not-found [routes data]\n  (throw (ex-info \"Could not find url for the provided data\"\n                  {:routes routes\n                   :data   data})))\n\n(defn route-match-not-found [routes url]\n  (throw (ex-info \"No match for URL in routes\"\n                  {:url    url\n                   :routes routes})))\n\n(defn valid? [{:keys [path-params required]}]\n  (set/subset? required (set (keys path-params))))\n\n(defn match-data [routes route hash?]\n  (let [[_ path-params] route\n        {:keys [path] :as match} (apply reitit/match-by-name routes route)]\n    (when (valid? match)\n      (str (when hash? \"/#\") path\n           (when-some [q (:query-string path-params)] (str \"?\" q))\n           (when-some [h (:hash path-params)] (str \"#\" h))))))\n\n(defn match-url [routes url]\n  (let [[path+query fragment] (-> url (str/replace #\"^/#/\" \"/\") (str/split #\"#\" 2))\n        [path query] (str/split path+query #\"\\?\" 2)]\n    (some-> (reitit/match-by-path routes path)\n            (assoc :query-string query :hash fragment))))\n\n(defrecord ReititRouter [routes hash? not-found]\n  api/Router\n  (data->url [_ data]\n    (assert-route-data data)\n    (or (match-data routes data hash?)\n        (url-not-found routes data)))\n  (url->data [_ url]\n    (or (match-url routes url)\n        (some->> not-found (match-url routes))\n        (route-match-not-found routes url))))\n\n(defn bootstrap-routes [{:keys [routes router hash-routing? scroll route-change-event not-found]}]\n  (let [initialized? (boolean @state/navigator)\n        router (or router (->ReititRouter (reitit/router routes) hash-routing? not-found))]\n    (reset! state/router router)\n    (rf/reg-fx :navigate-to goto)\n\n    (when-not initialized?\n      (when scroll (scroll/start!))\n      (reset! state/navigator\n              (interop/make-navigator {:nav-handler  (nav-handler router route-change-event)\n                                       :path-exists? #(boolean (url->data router %))})))\n    (dispatch-current! @state/navigator)))\n\n(rf/reg-event-db :init (fn [db [_ initial]] (merge initial db)))\n\n(defn reg-route-event [scroll]\n  (rf/reg-event-fx ::route-changed\n    [event-logger/interceptor]\n    (fn [{:keys [db] :as ctx} [_ route]]\n      (when scroll\n        (scroll/monitor-requests! route))\n      (let [{:keys [update-controllers dispatch-n]} (controller/controller-effects @state/controllers ctx route)]\n        (cond-> {:db             (assoc db :kee-frame/route route)\n                 :dispatch-later [(when scroll\n                                    {:ms       50\n                                     :dispatch [::scroll/poll route 0]})]}\n          dispatch-n (assoc :dispatch-n dispatch-n)\n          update-controllers (assoc :update-controllers update-controllers))))))\n\n(defn deprecations [{:keys [debug? debug-config]}]\n  (when (not (nil? debug?))\n    (console :warn \"Kee-frame option :debug? has been removed. Configure timbre logger through :log option instead. Example: {:level :debug :ns-blacklist [\\\"kee-frame.event-logger\\\"]}\"))\n\n  (when (not (nil? debug-config))\n    (console :warn \"Kee-frame option :debug-config has been removed. Configure timbre logger through :log option instead. Example: {:level :debug :ns-blacklist [\\\"kee-frame.event-logger\\\"]}\")))\n\n(defn start! [{:keys [routes initial-db router app-db-spec root-component chain-links\n                      screen scroll global-interceptors log-spec-error]\n               :or   {scroll true}\n               :as   config}]\n  (deprecations config)\n  (when app-db-spec\n    (f/reg-global-interceptor (spec/spec-interceptor app-db-spec log-spec-error)))\n  (doseq [i global-interceptors]\n    (f/reg-global-interceptor i))\n  (chain/configure! (concat default-chain-links\n                            chain-links))\n\n  (reg-route-event scroll)\n  (when (and routes router)\n    (throw (ex-info \"Both routes and router specified. If you want to use these routes, pass them to your router constructor.\"\n                    {:routes routes\n                     :router router})))\n  (when (or routes router)\n    (bootstrap-routes config))\n\n  (when initial-db\n    (rf/dispatch-sync [:init initial-db]))\n\n  (when screen\n    (let [config (when-not (boolean? screen) screen)]\n      (if @state/breakpoints-initialized?\n        (interop/set-breakpoint-subs config)\n        (do (interop/set-breakpoints config)\n            (reset! state/breakpoints-initialized? true)))))\n\n  (rf/reg-sub :kee-frame/route (fn [db _] (:kee-frame/route db nil)))\n  (interop/render-root root-component))\n\n(defn make-route-component [component route]\n  (if (fn? component)\n    [component route]\n    component))\n\n(defn case-route [f & pairs]\n  (let [route          (rf/subscribe [:kee-frame/route])\n        dispatch-value (f @route)]\n    (loop [[first-pair & rest-pairs] (partition-all 2 pairs)]\n      (cond\n\n        (some-> first-pair seq count (= 2))\n        (let [[value component] first-pair]\n          (if (= value dispatch-value)\n            (make-route-component component @route)\n            (recur rest-pairs)))\n\n        (some-> first-pair seq count (= 1))\n        (make-route-component (first first-pair) @route)\n\n        :else\n        (throw (ex-info \"Could not find a component to match route. Did you remember to include a single last default case?\"\n                        {:route          @route\n                         :dispatch-value dispatch-value\n                         :pairs          pairs}))))))\n\n(defn switch-route [f & pairs]\n  (when-not (even? (count pairs))\n    (throw (ex-info \"switch-route accepts an even number of args\" {:pairs       pairs\n                                                                   :pairs-count (count pairs)})))\n  (let [route          (rf/subscribe [:kee-frame/route])\n        dispatch-value (f @route)]\n    (loop [[first-pair & rest-pairs] (partition 2 pairs)]\n      (if first-pair\n        (let [[value component] first-pair]\n          (if (= value dispatch-value)\n            (make-route-component component @route)\n            (recur rest-pairs)))\n        (throw (ex-info \"Could not find a component to match route. Did you remember to include a case for nil?\"\n                        {:route          @route\n                         :dispatch-value dispatch-value\n                         :pairs          pairs}))))))\n"]}