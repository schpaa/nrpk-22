{"version":3,"sources":["kee_frame/spec.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/vector?","cljs.core/fn?","cljs.spec.alpha/map-spec-impl","G__46709","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.core/any?","p1__46759#","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","kee-frame.api/Router","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.spec.alpha.every_impl","G__46861","cljs.core/set?","G__46895","G__46959","G__47039","cljs.core/coll?","cljs.core/number?","G__47081","G__47105","G__47166","kee-frame.spec/default-log-spec-error","new-db","spec","re_frame.core.console","expound.alpha.expound","kee-frame.spec/rollback","context","db-spec","log-spec-error","fexpr__47194","or__4253__auto__","re-frame.interceptor/assoc-effect","re_frame.interceptor.get_coeffect","kee-frame.spec/spec-interceptor","re_frame.interceptor.__GT_interceptor","re_frame.interceptor.get_effect","and__4251__auto__","cljs.spec.alpha.valid_QMARK_"],"sourcesContent":["(ns ^:no-doc kee-frame.spec\n  (:require [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n            [re-frame.core :refer [console]]\n            [clojure.spec.alpha :as s]\n            [re-chain.core :as chain]\n            [expound.alpha :as e]\n            [kee-frame.api :as api]))\n\n(s/def ::params (s/or :path-vector vector? :fn fn?))\n(s/def ::start (s/or :vector ::event-vector :fn fn?))\n(s/def ::stop (s/or :vector ::event-vector :fn fn?))\n\n(s/def ::controller (s/keys :req-un [::params ::start]\n                            :opt-un [::stop]))\n\n(s/def ::event-vector (s/cat :event-key keyword? :event-args (s/* any?)))\n\n(s/def ::routes any?)\n(s/def ::router #(satisfies? api/Router %))\n(s/def ::hash-routing? (s/nilable boolean?))\n(s/def ::root-component (s/nilable vector?))\n(s/def ::global-interceptors (s/nilable vector?))\n(s/def ::initial-db (s/nilable map?))\n(s/def ::app-db-spec (s/nilable keyword?))\n(s/def ::blacklist (s/coll-of keyword? :kind set?))\n(s/def ::debug?  boolean?)\n(s/def ::debug-config (s/nilable (s/keys :opt-un [::blacklist ::events? ::controllers? ::routes? ::overwrites?])))\n(s/def ::link (s/keys :req-un [::effect-present? ::get-dispatch ::set-dispatch]))\n(s/def ::chain-links (s/nilable (s/coll-of ::link)))\n(s/def ::breakpoints vector?)\n(s/def ::debounce-ms number?)\n(s/def ::log-spec-error (s/nilable fn?))\n(s/def ::scroll (s/nilable (s/or :boolean boolean?\n                                 :config (s/keys :opt-un [:scroll/timeout]))))\n(s/def ::screen (s/nilable (s/or :boolean boolean?\n                                 :config (s/keys :req-un [::breakpoints ::debounce-ms]))))\n\n(s/def ::start-options (s/keys :opt-un [::routes ::router ::hash-routing? ::root-component ::initial-db ::log ::log-spec-error\n                                        ::app-db-spec ::debug? ::debug-config ::chain-links ::screen ::scroll ::global-interceptors]))\n\n(defn default-log-spec-error [new-db spec]\n  (console :group \"*** Spec error when updating DB, rolling back ***\")\n  (e/expound spec new-db)\n  (console :groupEnd \"*****************************\"))\n\n(defn rollback [context new-db db-spec log-spec-error]\n  ((or log-spec-error\n       default-log-spec-error) new-db db-spec)\n  (assoc-effect context :db (get-coeffect context :db)))\n\n(defn spec-interceptor [db-spec log-spec-error]\n  (->interceptor\n   :id :spec\n   :after (fn [context]\n            (let [new-db (get-effect context :db)]\n              (if (and new-db (not (s/valid? db-spec new-db)))\n                (rollback context new-db db-spec log-spec-error)\n                context)))))\n"]}