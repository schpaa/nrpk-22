shadow$provide.module$node_modules$$firebase$logger$dist$index_cjs=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var tslib=require("module$node_modules$tslib$tslib"),_a,instances=[];exports.LogLevel=void 0;(function(LogLevel){LogLevel[LogLevel.DEBUG=0]="DEBUG";LogLevel[LogLevel.VERBOSE=1]="VERBOSE";LogLevel[LogLevel.INFO=2]="INFO";LogLevel[LogLevel.WARN=3]="WARN";LogLevel[LogLevel.ERROR=4]="ERROR";LogLevel[LogLevel.SILENT=5]="SILENT"})(exports.LogLevel||
(exports.LogLevel={}));var levelStringToEnum={debug:exports.LogLevel.DEBUG,verbose:exports.LogLevel.VERBOSE,info:exports.LogLevel.INFO,warn:exports.LogLevel.WARN,error:exports.LogLevel.ERROR,silent:exports.LogLevel.SILENT},defaultLogLevel=exports.LogLevel.INFO,ConsoleMethod=(_a={},_a[exports.LogLevel.DEBUG]="log",_a[exports.LogLevel.VERBOSE]="log",_a[exports.LogLevel.INFO]="info",_a[exports.LogLevel.WARN]="warn",_a[exports.LogLevel.ERROR]="error",_a),defaultLogHandler=function(instance,logType){for(var args=
[],_i=2;_i<arguments.length;_i++)args[_i-2]=arguments[_i];if(!(logType<instance.logLevel)){_i=(new Date).toISOString();var method=ConsoleMethod[logType];if(method)console[method].apply(console,tslib.__spreadArray(["["+_i+"]  "+instance.name+":"],args));else throw Error("Attempted to log a message with an invalid logType (value: "+logType+")");}};global=function(){function Logger(name){this.name=name;this._logLevel=defaultLogLevel;this._logHandler=defaultLogHandler;this._userLogHandler=null;instances.push(this)}
Object.defineProperty(Logger.prototype,"logLevel",{get:function(){return this._logLevel},set:function(val){if(!(val in exports.LogLevel))throw new TypeError('Invalid value "'+val+'" assigned to `logLevel`');this._logLevel=val},enumerable:!1,configurable:!0});Logger.prototype.setLogLevel=function(val){this._logLevel="string"===typeof val?levelStringToEnum[val]:val};Object.defineProperty(Logger.prototype,"logHandler",{get:function(){return this._logHandler},set:function(val){if("function"!==typeof val)throw new TypeError("Value assigned to `logHandler` must be a function");
this._logHandler=val},enumerable:!1,configurable:!0});Object.defineProperty(Logger.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(val){this._userLogHandler=val},enumerable:!1,configurable:!0});Logger.prototype.debug=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._userLogHandler&&this._userLogHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.DEBUG],args));this._logHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.DEBUG],
args))};Logger.prototype.log=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._userLogHandler&&this._userLogHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.VERBOSE],args));this._logHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.VERBOSE],args))};Logger.prototype.info=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._userLogHandler&&this._userLogHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.INFO],
args));this._logHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.INFO],args))};Logger.prototype.warn=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._userLogHandler&&this._userLogHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.WARN],args));this._logHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.WARN],args))};Logger.prototype.error=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._userLogHandler&&
this._userLogHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.ERROR],args));this._logHandler.apply(this,tslib.__spreadArray([this,exports.LogLevel.ERROR],args))};return Logger}();exports.Logger=global;exports.setLogLevel=function(level){instances.forEach(function(inst){inst.setLogLevel(level)})};exports.setUserLogHandler=function(logCallback,options){for(var _loop_1=function(instance$jscomp$0){var customLogLevel=null;options&&options.level&&(customLogLevel=levelStringToEnum[options.level]);
instance$jscomp$0.userLogHandler=null===logCallback?null:function(instance,level){for(var args=[],_i=2;_i<arguments.length;_i++)args[_i-2]=arguments[_i];_i=args.map(function(arg){if(null==arg)return null;if("string"===typeof arg)return arg;if("number"===typeof arg||"boolean"===typeof arg)return arg.toString();if(arg instanceof Error)return arg.message;try{return JSON.stringify(arg)}catch(ignored){return null}}).filter(function(arg){return arg}).join(" ");level>=(null!==customLogLevel&&void 0!==customLogLevel?
customLogLevel:instance.logLevel)&&logCallback({level:exports.LogLevel[level].toLowerCase(),message:_i,args,type:instance.name})}},_i$jscomp$0=0;_i$jscomp$0<instances.length;_i$jscomp$0++)_loop_1(instances[_i$jscomp$0])}}
//# sourceMappingURL=module$node_modules$$firebase$logger$dist$index_cjs.js.map
