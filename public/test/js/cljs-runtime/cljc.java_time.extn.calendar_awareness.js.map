{"version":3,"sources":["cljc/java_time/extn/calendar_awareness.cljc"],"mappings":";AAOA;;;2EAAA,3EACEA;AADF,AAAA;;AAMA,AAKA,mEAAA,nEAAKC;AAiCL","names":["cljc.java-time.extn.calendar-awareness/helpful-exception-messages?","cljc.java-time.extn.calendar-awareness/helpful-exception-message"],"sourcesContent":["(ns cljc.java-time.extn.calendar-awareness\r\n  #?(:cljs (:require-macros [cljc.java-time.extn.calendar-awareness :refer [calendar-aware-cljs]]))\r\n  #?(:bb \r\n     ; have to put something in bb branch I guess\r\n     (:import (java.time Instant))\r\n     :clj (:import (java.time.temporal UnsupportedTemporalTypeException))))\r\n\r\n(defn\r\n  helpful-exception-messages?\r\n  \"If true, the lib will try to add more helpful messages to exceptions\" []\r\n  #?(:clj (not= \"true\" (System/getProperty \"cljc.java-time.disable-helpful-exception-messages\")))\r\n  )\r\n\r\n(comment \r\n  (System/setProperty \"cljc.java-time.disable-helpful-exception-messages\" \"true\")\r\n  (System/setProperty \"cljc.java-time.disable-helpful-exception-messages\" \"false\")\r\n  )\r\n\r\n(def helpful-exception-message\r\n  \"Hi there! - It looks like you might be trying to do something with a java.time.Instant that would require it to be 'calendar-aware',\r\n   but in fact Instant has no facility with working with years, months, days etc. Think of it as just \r\n   a milli/nanosecond offset from the UNIX epoch.\r\n   \r\n   To get around this, consider converting the Instant to a \r\n   ZonedDateTime first or for formatting/parsing specifically, you might add a zone to your formatter.\r\n    see https://stackoverflow.com/a/27483371/1700930. \r\n    \r\n    You can disable these custom exceptions by setting -Dcljc.java-time.disable-helpful-exception-messages=true\")\r\n\r\n(defmacro calendar-aware-clj [f]\r\n  (if-not (helpful-exception-messages?)\r\n    f\r\n    `(try\r\n       ~f\r\n       (catch #?(:bb Exception :clj UnsupportedTemporalTypeException) e#\r\n         (throw (#?(:bb Exception. :clj UnsupportedTemporalTypeException.)\r\n                  (str ~helpful-exception-message\r\n                    \"\\n original message \" (.getMessage e#)\r\n                    \"\\n cause of exception: \" (-> (.getStackTrace e#) first\r\n                                                  str))))))))\r\n\r\n(defmacro calendar-aware-cljs [f]\r\n  (if-not (helpful-exception-messages?)\r\n    f\r\n    `(try\r\n       ~f\r\n       (catch js/Error e#\r\n         (throw (js/Error. (str ~helpful-exception-message\r\n                             \"\\n original message \" (goog.object/get e# \"message\")\r\n                             \"\\n cause of exception: \" (goog.object/get e# \"stack\"))))))))\r\n\r\n(comment\r\n  \r\n  *e\r\n  (-> (goog.object/get *e \"stack\"))\r\n  (in-ns 'cljc.java-time.extn.calendar-awareness)\r\n  (do\r\n    (require '[cljc.java-time.instant :as i])\r\n    (require '[cljc.java-time.temporal.chrono-unit :as cu])\r\n    (require '[cljc.java-time.temporal.chrono-field :as cf])\r\n    (require '[cljc.java-time.local-date :as ld])\r\n    (require '[cljc.java-time.format.date-time-formatter :as f])\r\n    )\r\n(-> (js/Error. \"sdf\") (.-message))\r\n  (calendar-aware-cljs (i/plus (i/now) 1 cu/years))\r\n  (i/minus (i/now) 1 cu/years)\r\n  (i/plus (i/now) 1 cu/years)\r\n  (i/range (i/now) cf/minute-of-day)\r\n  (i/until (i/now) (cljc.java-time.local-date/now) cu/years)\r\n  (i/from (ld/now))\r\n  (i/adjust-into (i/now) (ld/now))\r\n  (i/with (i/now) cf/minute-of-day 1)\r\n  (i/get (i/now) cf/minute-of-day)\r\n\r\n  (def my-format (f/of-pattern \"yyyy-MMM-dd\"))\r\n  (cljc.java-time.format.date-time-formatter/format my-format (i/now))\r\n\r\n  )"]}