{"version":3,"sources":["db/fsdb.cljs"],"mappings":";;AAgBA;;;mCAAA,2CAAAA,9EAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAEWI;AAFX,AAIE,IAAMC,oBAAM,iCAAA,0JAAA,zLACE,OAASD,mBAAMA,OACf,AAACE,wBAAQF,OAAM,AAACG,8CAAMC,cAAI,kDAAA,lDAACC,sDAAcL;IACjDM,MAAI,AAAKC,0DAAI,AAACC,qEAAcP;IAC5BQ,WAAS,gDAAA,hDAACC;IACVC,cAAY,AAACC,iEAAWN,IAAI,WAAKO;AAAL,AAAQ,OAACC,sBAAOL,SAAS,AAACM,mDAAQ,AAAOF;;AAL3E,AAME,OAACG,iEACC;AAAA,AAAA,OAAAC,gBAAQR;qDADV,iEAAA;AAAA,AAEe,QAACE,4CAAAA,8CAAAA;;;AAEpB;;;oCAAA,4CAAAO,hFAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAtB,4BAAAsB;WAAA,AAAArB,4CAAAqB,eAAA,lEAEWnB;AAFX,AAGE,IAAMA,WAAK,AAACG,8CAAMC,cAAI,kDAAA,lDAACC,sDAAcL;IAC/BM,MAAI,AAACe,iEAAW,AAACb,qEAAcR;IAC/BsB,IAAE,AAACC,4DAAMjB,IAAI,8DAAA,YAAA,1EAACkB;IACdf,WAAS,gDAAA,hDAACC;IACVC,cAAY,AAACC,iEAAWU,EACA,WAAKG;AAAL,AACE,IAAMC,KAAG,AAACC,4CAAI,WAAKC;AAAL,AAAA,kDAAA,uDAAA,LACe,AAAMA,0DACN,AAACb,mDAAQ,AAAOa;GAC/B,AAAQH;AAHtB,AAIE,OAACX,sBAAOL,SAASiB;;AAVnD,AAYE,OAACV,iEACC;AAAA,AAAA,OAAAC,gBAAQR;qDADV,iEAAA;AAAA,AAEe,QAACE,4CAAAA,8CAAAA;;;AAEpB;;;wBAAA,gCAAAkB,xDAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAjC,4BAAAiC;WAAA,AAAAhC,4CAAAgC,eAAA,lEAEW9B;YAFX,AAAAF,4CAAAgC,eAAA,nEAEgBE;cAFhB,AAAAlC,4CAAAgC,eAAA,yDAAA,2CAAA,8DAAA,KAAA,wDAAA,pSAEsBG;AAFtB,AAIE,IAAM3B,MAAI,AAACH,8CAAMI,0DAAI,AAACC,qEAAcR;IAC9BgC,YAAM,kBAAI,AAAA,4FAAYC,UACd,oDAAA,pDAACC,8CAAMF,oEAAiB,AAACG,yEACzBH;AAHd,AAIE,OAACI,6DAAO9B,IAAI,AAAC+B,qBAAQL,WAAO,AAACK,qBAAQJ;;AAEzC;;;wBAAA,gCAAAK,xDAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA1C,4BAAA0C;WAAA,AAAAzC,4CAAAyC,eAAA,lEAEWvC;YAFX,AAAAF,4CAAAyC,eAAA,nEAEgBP;cAFhB,AAAAlC,4CAAAyC,eAAA,yDAAA,2CAAA,8DAAA,KAAA,wDAAA,pSAEsBN;AAFtB,AAIE,IAAM3B,MAAI,AAACC,0DAAI,AAACJ,8CAAMkB,iEAAW,AAACb,qEAAcR;IAC1CgC,YAAM,kBAAI,AAAA,4FAAYC,UACd,oDAAA,pDAACC,8CAAMF,oEAAiB,AAACG,yEACzBH;AAHd,AAIE,OAACI,6DAAO9B,IAAI,AAAC+B,qBAAQL,WAAO,AAACK,qBAAQJ","names":["p__73706","map__73708","cljs.core/--destructure-map","cljs.core.get","db.fsdb/on-snapshot-doc-reaction","path","path'","cljs.core/vector?","cljs.core.apply","cljs.core/str","cljs.core.interpose","ref","js/module$node_modules$firebase$firestore$dist$index_esm.doc","js/module$node_modules$firebase$firestore$dist$index_esm.getFirestore","reaction","reagent.core.atom","unsubscribe","js/module$node_modules$firebase$firestore$dist$index_esm.onSnapshot","d","cljs.core/reset!","cljs.core.js__GT_clj","reagent.ratom.make_reaction","cljs.core/deref","p__73716","map__73717","db.fsdb/on-snapshot-docs-reaction","js/module$node_modules$firebase$firestore$dist$index_esm.collection","q","js/module$node_modules$firebase$firestore$dist$index_esm.query","js/module$node_modules$firebase$firestore$dist$index_esm.orderBy","querySnapshot","vs","cljs.core.map","e","p__73722","map__73724","db.fsdb/firestore-set","value","options","cljs.core.assoc","js/module$node_modules$firebase$firestore$dist$index_esm.serverTimestamp","js/module$node_modules$firebase$firestore$dist$index_esm.setDoc","cljs.core/clj->js","p__73727","map__73728","db.fsdb/firestore-add"],"sourcesContent":["(ns db.fsdb\n  (:require [re-frame.core :as rf]\n            [\"firebase/firestore\" :refer [getFirestore collection query where getDocs onSnapshot doc setDoc Timestamp addDoc\n                                          orderBy limit\n                                          serverTimestamp]]\n            ;[schpaa.lib.debug :as l]\n            ;[app.system.database.state :refer [app]]\n            [reagent.ratom :as ratom]\n            [cljs-time.core :as t]\n            [reagent.core :as r]\n            [cljs-bean.core :refer [->clj ->js]]\n            #_[app.system.database.common :refer [database-ref\n                                                  collection-ref\n                                                  firestore-ref ->path\n                                                  success-failure-dispatch]]))\n\n(defn on-snapshot-doc-reaction\n  \"returns a reagent atom that will always have the latest value at 'path' in the Firebase database\"\n  [{:keys [path]}]\n  ;{:pre [(vector? path)]}\n  (let [path' (cond\n                (string? path) path\n                (vector? path) (apply str (interpose \"/\" path)))\n        ref ^js (doc (getFirestore) path')\n        reaction (r/atom nil)\n        unsubscribe (onSnapshot ref (fn [d] (reset! reaction (js->clj (.data d)))))]\n    (ratom/make-reaction\n      (fn [] @reaction)\n      :on-dispose #(unsubscribe))))\n\n(defn on-snapshot-docs-reaction\n  \"returns a reagent atom that will always have the latest snapshot at 'collection-path' in the Firebase firestore\"\n  [{:keys [path]}]\n  (let [path (apply str (interpose \"/\" path))\n        ref (collection (getFirestore) path)\n        q (query ref (orderBy \"timestamp\" \"desc\") #_(limit 2))\n        reaction (r/atom nil)\n        unsubscribe (onSnapshot q\n                                (fn [querySnapshot]\n                                  (let [vs (map (fn [e] {;todo Add more fields in the future\n                                                         :id   (.-id e)\n                                                         :data (js->clj (.data e))})\n                                                (.-docs querySnapshot))]\n                                    (reset! reaction vs))))]\n\n    (ratom/make-reaction\n      (fn [] @reaction)\n      :on-dispose #(unsubscribe))))\n\n(defn firestore-set\n  \"store a document\"\n  [{:keys [path value options] :or {options {:timestamp true\n                                             :merge true}}}]\n  (let [ref (apply doc (getFirestore) path)\n        value (if (:timestamp options)\n                (assoc value :timestamp (serverTimestamp) #_(.fromDate Timestamp (t/now)))\n                value)]\n    (setDoc ref (clj->js value) (clj->js options))))\n\n(defn firestore-add\n  \"store a document with a new id\"\n  [{:keys [path value options] :or {options {:timestamp true\n                                             :merge true}}}]\n  (let [ref (doc (apply collection (getFirestore) path))\n        value (if (:timestamp options)\n                (assoc value :timestamp (serverTimestamp) #_(.fromDate Timestamp (t/now)))\n                value)]\n    (setDoc ref (clj->js value) (clj->js options))))\n"]}