{"version":3,"sources":["db/core.cljs"],"mappings":"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","names":["db.core/debug?","js/goog.DEBUG","db.core/database-set","db.rtdb/ref-set","db.core/database-update","db.rtdb/ref-update","db.core/database-update-increment","db.rtdb/database-update-increment","db.core/database-push","db.rtdb/ref-push","db.core/database-get","db.rtdb/ref-get","db.core/on-value-reaction","db.rtdb/on-value-reaction","db.core/on-snapshot-docs-reaction","db.fsdb/on-snapshot-docs-reaction","db.core/on-snapshot-doc-reaction","db.fsdb/on-snapshot-doc-reaction","db.core/sign-out","db.auth/sign-out","db.core/firestore-set","db.fsdb/firestore-set","db.core/firestore-add","db.fsdb/firestore-add","db.core/timestamp","m","cljs.core.assoc","cljs-time.core/now","p__73948","map__73949","cljs.core/--destructure-map","cljs.core.get","db.core/init!","config","js/console","cljs.core/reset!","db.state/app","js/module$node_modules$firebase$app$dist$index_esm.initializeApp","cljs.core/clj->js","js/module$node_modules$firebase$database$dist$index_esm.connectDatabaseEmulator","js/module$node_modules$firebase$database$dist$index_esm.getDatabase","js/module$node_modules$firebase$storage$dist$index_esm.connectStorageEmulator","js/module$node_modules$firebase$storage$dist$index_esm.getStorage","js/module$node_modules$firebase$firestore$dist$index_esm.connectFirestoreEmulator","js/module$node_modules$firebase$firestore$dist$index_esm.getFirestore","re_frame.core.reg_sub","_","G__73952","input","data","p__73956","vec__73957","cljs.core.nth","a","k","v","temp__5751__auto__","c","cljs.core/count","cljs.core/val","cljs.core/first","cljs-time.coerce/from-long","cljs.core.reduce","cljs.core/seq","cljs.core/filterv","cljs.core.comp","re_frame.core.reg_event_db","p__73962","vec__73963","js/Error","db","arg","cljs.core/map?","db.auth/user-info","user","cljs.core/not","p__73966","p__73967","vec__73968","vec__73971","ua","fu","field","u","or__5043__auto__","G__73974","cljs.core/Keyword"],"sourcesContent":["(ns db.core\n  (:require [re-frame.core :as rf]\n            [db.rtdb]\n            [db.auth]\n            [db.state]\n            [db.fsdb]\n            [cljs-time.core :as t]\n            [cljs-time.coerce]\n            [\"firebase/app\" :refer [initializeApp]]\n            [\"firebase/firestore\" :refer [getFirestore connectFirestoreEmulator]]\n            [\"firebase/storage\" :refer [getStorage connectStorageEmulator]]\n            [\"firebase/database\" :refer [getDatabase connectDatabaseEmulator]]\n            [reagent.core :as r]))\n\n\n(def debug? ^boolean js/goog.DEBUG)\n\n(def database-set db.rtdb/ref-set)\n(def database-update db.rtdb/ref-update)\n(def database-update-increment db.rtdb/database-update-increment)\n(def database-push db.rtdb/ref-push)\n(def database-get db.rtdb/ref-get)\n(def on-value-reaction db.rtdb/on-value-reaction)\n(def on-snapshot-docs-reaction db.fsdb/on-snapshot-docs-reaction)\n(def on-snapshot-doc-reaction db.fsdb/on-snapshot-doc-reaction)\n(def sign-out db.auth/sign-out)\n(def firestore-set db.fsdb/firestore-set)\n(def firestore-add db.fsdb/firestore-add)\n\n(defn timestamp [m] (assoc m :timestamp (str (t/now))))\n\n(defn init! [{:keys [config]}]\n  (.log js/console \"db/init!\")\n  (reset! db.state/app (initializeApp (clj->js config)))\n  (when debug?\n    (connectDatabaseEmulator (getDatabase) \"localhost\" 9009)\n    (connectStorageEmulator (getStorage) \"localhost\" 9199)\n    (connectFirestoreEmulator (getFirestore) \"localhost\" 8080)))\n\n(rf/reg-sub ::presence-status\n            (fn [_]\n              (on-value-reaction {:path [\"presence\"]}))\n            (fn [input _]\n              (let [data (-> (fn [a [k v]]\n                               (if-let [c (:connections v)]\n                                 (assoc a k\n                                          {:connections (count c)\n                                           ;todo wtf ugh?\n                                           :ugh         (val (first c))})\n                                 (assoc a k {:lastOnline (cljs-time.coerce/from-long (:lastOnline v))})))\n                             (reduce {} (seq input)))]\n                {:offline (filterv (comp :lastOnline val) data)\n                 :online  (filterv (comp :connections val) data)})))\n\n(rf/reg-event-db ::set-fake-user (fn [db [_ arg]]\n                                   {:pre [(or (nil? arg) (map? arg))]}\n                                   (assoc db ::fake-user arg)))\n\n(rf/reg-sub ::fake-user (fn [db] (get db ::fake-user)))\n\n(rf/reg-sub ::user-auth\n            db.auth/user-info\n            (fn [user _]\n              (if (or (not user)\n                      (instance? js/Error user))\n                nil\n                user)))\n\n(rf/reg-sub ::root-auth\n            :<- [::user-auth]\n            :<- [::fake-user]\n            (fn [[ua fu] [_ field]]\n              (let [u (or fu ua)]\n                (case field\n                  :uid (:uid u)\n                  u))))\n"]}