{"version":3,"sources":["time_literals/read_write.cljc"],"mappings":"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","names":["time-literals.read-write/print-to-string","t","o","time-literals.read-write/print-period","cljs.core.partial","time-literals.read-write/print-date","time-literals.read-write/print-date-time","time-literals.read-write/print-zoned-date-time","time-literals.read-write/print-offset-time","time-literals.read-write/print-instant","time-literals.read-write/print-offset-date-time","time-literals.read-write/print-zone","time-literals.read-write/print-day-of-week","time-literals.read-write/print-time","time-literals.read-write/print-month","time-literals.read-write/print-month-day","time-literals.read-write/print-duration","time-literals.read-write/print-year","time-literals.read-write/print-year-month","time-literals.read-write/print-time-literals-cljs!","cljs.core/PROTOCOL_SENTINEL","java.time/Period","d","writer","opts","cljs.core/-write","java.time/LocalDate","java.time/LocalDateTime","java.time/ZonedDateTime","java.time/OffsetTime","java.time/Instant","java.time/OffsetDateTime","java.time/ZoneId","java.time/DayOfWeek","java.time/LocalTime","java.time/Month","java.time/MonthDay","java.time/Duration","java.time/Year","java.time/YearMonth","time-literals.read-write/print-time-literals-clj!","time-literals.read-write/tags","seq__74137","cljs.core/seq","chunk__74138","count__74139","i__74140","vec__74149","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__74152","cljs.core/first","cljs.core/next","tag","read-fn","cljs.reader/register-tag-parser!"],"sourcesContent":["(ns time-literals.read-write\r\n  #?@(:cljs\r\n      [(:require\r\n         [java.time :refer [Period\r\n                            LocalDate\r\n                            LocalDateTime\r\n                            ZonedDateTime\r\n                            OffsetTime\r\n                            Instant\r\n                            OffsetDateTime\r\n                            ZoneId\r\n                            DayOfWeek\r\n                            LocalTime\r\n                            Month\r\n                            Duration\r\n                            Year\r\n                            YearMonth\r\n                            MonthDay]]\r\n         [cljs.reader :as reader])]\r\n      :clj\r\n      [\r\n       (:import (java.io Writer)\r\n                [java.time Period\r\n                           LocalDate\r\n                           LocalDateTime\r\n                           ZonedDateTime\r\n                           OffsetTime\r\n                           Instant\r\n                           OffsetDateTime\r\n                           ZoneId\r\n                           DayOfWeek\r\n                           LocalTime\r\n                           Month\r\n                           Duration\r\n                           Year\r\n                           YearMonth\r\n                           MonthDay])]))\r\n\r\n(defn- print-to-string [t o]\r\n  (str \"#time/\" t \" \\\"\" (str o) \"\\\"\"))\r\n\r\n(def print-period (partial print-to-string \"period\"))\r\n(def print-date (partial print-to-string \"date\"))\r\n(def print-date-time (partial print-to-string \"date-time\"))\r\n(def print-zoned-date-time (partial print-to-string \"zoned-date-time\"))\r\n(def print-offset-time (partial print-to-string \"offset-time\"))\r\n(def print-instant (partial print-to-string \"instant\"))\r\n(def print-offset-date-time (partial print-to-string \"offset-date-time\"))\r\n(def print-zone (partial print-to-string \"zone\"))\r\n(def print-day-of-week (partial print-to-string \"day-of-week\"))\r\n(def print-time (partial print-to-string \"time\"))\r\n(def print-month (partial print-to-string \"month\"))\r\n(def print-month-day (partial print-to-string \"month-day\"))\r\n(def print-duration (partial print-to-string \"duration\"))\r\n(def print-year (partial print-to-string \"year\"))\r\n(def print-year-month (partial print-to-string \"year-month\"))\r\n\r\n(defn print-time-literals-cljs! []\r\n\r\n  #?(:cljs\r\n     (extend-protocol IPrintWithWriter\r\n       Period (-pr-writer [d writer opts] (-write writer (print-period d)))\r\n       LocalDate (-pr-writer [d writer opts] (-write writer (print-date d)))\r\n       LocalDateTime (-pr-writer [d writer opts] (-write writer (print-date-time d)))\r\n       ZonedDateTime (-pr-writer [d writer opts] (-write writer (print-zoned-date-time d)))\r\n       OffsetTime (-pr-writer [d writer opts] (-write writer (print-offset-time d)))\r\n       Instant (-pr-writer [d writer opts] (-write writer (print-instant d)))\r\n       OffsetDateTime      (-pr-writer [d writer opts]        (-write writer (print-offset-date-time d)))\r\n       ZoneId (-pr-writer [d writer opts] (-write writer (print-zone d)))\r\n       DayOfWeek (-pr-writer [d writer opts] (-write writer (print-day-of-week d)))\r\n       LocalTime (-pr-writer [d writer opts] (-write writer (print-time d)))\r\n       Month (-pr-writer [d writer opts] (-write writer (print-month d)))\r\n       MonthDay (-pr-writer [d writer opts] (-write writer (print-month-day d)))\r\n       Duration (-pr-writer [d writer opts] (-write writer (print-duration d)))\r\n       Year (-pr-writer [d writer opts] (-write writer (print-year d)))\r\n       YearMonth (-pr-writer [d writer opts] (-write writer (print-year-month d)))\r\n       )))\r\n\r\n(defn print-time-literals-clj! []\r\n  #?(:clj (defmethod print-method Period [c ^Writer w] (.write w ^String ^String (print-period c))))\r\n  #?(:clj (defmethod print-method LocalDate [c ^Writer w] (.write w ^String (print-date c))))\r\n  #?(:clj (defmethod print-method LocalDateTime [c ^Writer w] (.write w ^String (print-date-time c))))\r\n  #?(:clj (defmethod print-method ZonedDateTime [c ^Writer w] (.write w ^String (print-zoned-date-time c))))\r\n  #?(:clj (defmethod print-method OffsetTime [c ^Writer w] (.write w ^String (print-offset-time c))))\r\n  #?(:clj (defmethod print-method Instant [c ^Writer w] (.write w ^String (print-instant c))))\r\n  #?(:clj (defmethod print-method OffsetDateTime [c ^Writer w] (.write w ^String (print-offset-date-time c))))\r\n  #?(:clj (defmethod print-method ZoneId [c ^Writer w] (.write w ^String (print-zone c))))\r\n  #?(:clj (defmethod print-method DayOfWeek [c ^Writer w] (.write w ^String (print-day-of-week c))))\r\n  #?(:clj (defmethod print-method LocalTime [c ^Writer w] (.write w ^String (print-time c))))\r\n  #?(:clj (defmethod print-method Month [c ^Writer w] (.write w ^String (print-month c))))\r\n  #?(:clj (defmethod print-method MonthDay [c ^Writer w] (.write w ^String (print-month-day c))))\r\n  #?(:clj (defmethod print-method Duration [c ^Writer w] (.write w ^String (print-duration c))))\r\n  #?(:clj (defmethod print-method Year [c ^Writer w] (.write w ^String (print-year c))))\r\n  #?(:clj (defmethod print-method YearMonth [c ^Writer w] (.write w ^String (print-year-month c)))))\r\n\r\n#?(:clj (defmethod print-dup Period [c ^Writer w] (.write w ^String (print-period c))))\r\n#?(:clj (defmethod print-dup LocalDate [c ^Writer w] (.write w ^String (print-date c))))\r\n#?(:clj (defmethod print-dup LocalDateTime [c ^Writer w] (.write w ^String (print-date-time c))))\r\n#?(:clj (defmethod print-dup ZonedDateTime [c ^Writer w] (.write w ^String (print-zoned-date-time c))))\r\n#?(:clj (defmethod print-dup OffsetTime [c ^Writer w] (.write w ^String (print-offset-time c))))\r\n#?(:clj (defmethod print-dup Instant [c ^Writer w] (.write w ^String (print-instant c))))\r\n#?(:clj (defmethod print-dup OffsetDateTime [c ^Writer w] (.write w ^String (print-offset-date-time c))))\r\n#?(:clj (defmethod print-dup ZoneId [c ^Writer w] (.write w ^String (print-zone c))))\r\n#?(:clj (defmethod print-dup DayOfWeek [c ^Writer w] (.write w ^String (print-day-of-week c))))\r\n#?(:clj (defmethod print-dup LocalTime [c ^Writer w] (.write w ^String (print-time c))))\r\n#?(:clj (defmethod print-dup Month [c ^Writer w] (.write w ^String (print-month c))))\r\n#?(:clj (defmethod print-dup MonthDay [c ^Writer w] (.write w ^String (print-month-day c))))\r\n#?(:clj (defmethod print-dup Duration [c ^Writer w] (.write w ^String (print-duration c))))\r\n#?(:clj (defmethod print-dup Year [c ^Writer w] (.write w ^String (print-year c))))\r\n#?(:clj (defmethod print-dup YearMonth [c ^Writer w] (.write w ^String (print-year-month c))))\r\n\r\n\r\n(def tags {'time/period           (fn [t] (. Period parse t))\r\n           'time/date             (fn [t] (. LocalDate parse t))\r\n           'time/date-time        (fn [t] (. LocalDateTime parse t))\r\n           'time/zoned-date-time  (fn [t] (. ZonedDateTime parse t))\r\n           'time/offset-time      (fn [t] (. OffsetTime parse t))\r\n           'time/instant          (fn [t] (. Instant parse t))\r\n           'time/offset-date-time (fn [t] (. OffsetDateTime parse t))\r\n           'time/time             (fn [t] (. LocalTime parse t))\r\n           'time/duration         (fn [t] (. Duration parse t))\r\n           'time/year             (fn [t] (. Year parse t))\r\n           'time/year-month       (fn [t] (. YearMonth parse t))\r\n           'time/zone             (fn [t] (. ZoneId of t))\r\n           'time/day-of-week      (fn [t] (. DayOfWeek valueOf t))\r\n           'time/month            (fn [t] (. Month valueOf t))\r\n           'time/month-day        (fn [t] (. MonthDay parse t))\r\n           })\r\n\r\n#?(:cljs\r\n   (do\r\n     (doseq [[tag read-fn] tags]\r\n       (reader/register-tag-parser! tag read-fn))))\r\n\r\n\r\n"]}