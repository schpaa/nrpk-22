{
"version":3,
"file":"module$node_modules$$firebase$component$dist$esm$index_esm2017.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@firebase/component/dist/esm/index.esm2017.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$firebase$component$dist$esm$index_esm2017\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Provider = exports.ComponentContainer = exports.Component = void 0;\n\nvar _util = require(\"@firebase/util\");\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nclass Component {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  constructor(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n    this.onInstanceCreated = null;\n  }\n\n  setInstantiationMode(mode) {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props) {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nexports.Component = Component;\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nclass Provider {\n  constructor(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  get(identifier) {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new _util.Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  }\n\n  getImmediate(options) {\n    var _a; // if multipleInstances is not supported, use the default name\n\n\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n    const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent() {\n    return this.component;\n  }\n\n  setComponent(component) {\n    if (component.name !== this.name) {\n      throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n\n    if (!this.shouldAutoInitialize()) {\n      return;\n    } // if the service is eager, initialize the default instance\n\n\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    } // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n\n\n    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n        instanceDeferred.resolve(instance);\n      } catch (e) {// when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier = DEFAULT_ENTRY_NAME) {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  } // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n\n\n  async delete() {\n    const services = Array.from(this.instances.values());\n    await Promise.all([...services.filter(service => 'INTERNAL' in service) // legacy services\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .map(service => service.INTERNAL.delete()), ...services.filter(service => '_delete' in service) // modularized services\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .map(service => service._delete())]);\n  }\n\n  isComponentSet() {\n    return this.component != null;\n  }\n\n  isInitialized(identifier = DEFAULT_ENTRY_NAME) {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier = DEFAULT_ENTRY_NAME) {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts = {}) {\n    const {\n      options = {}\n    } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    }); // resolve any pending promise waiting for the service instance\n\n    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @param identifier An optional instance identifier\r\n   * @returns a function to unregister the callback\r\n   */\n\n\n  onInit(callback, identifier) {\n    var _a;\n\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n    const existingInstance = this.instances.get(normalizedIdentifier);\n\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n\n\n  invokeOnInitCallbacks(instance, identifier) {\n    const callbacks = this.onInitCallbacks.get(identifier);\n\n    if (!callbacks) {\n      return;\n    }\n\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch (_a) {// ignore errors in the onInit callback\n      }\n    }\n  }\n\n  getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }) {\n    let instance = this.instances.get(instanceIdentifier);\n\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n      /**\r\n       * Invoke onInit listeners.\r\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n       * while onInit listeners are registered by consumers of the provider.\r\n       */\n\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_a) {// ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  shouldAutoInitialize() {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\"\n    /* EXPLICIT */\n    ;\n  }\n\n} // undefined should be passed to the service factory for the default instance\n\n\nexports.Provider = Provider;\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nclass ComponentContainer {\n  constructor(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  addComponent(component) {\n    const provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent(component) {\n    const provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n\n\n  getProvider(name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    } // create a Provider for a service that hasn't registered with Firebase\n\n\n    const provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  }\n\n  getProviders() {\n    return Array.from(this.providers.values());\n  }\n\n}\n\nexports.ComponentContainer = ComponentContainer;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Provider","ComponentContainer","Component","_util","constructor","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","_a","optional","Error","getComponent","setComponent","DEFAULT_ENTRY_NAME","instanceDeferred","entries","clearInstance","delete","services","Array","from","values","Promise","all","filter","service","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","undefined","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders"]
}
