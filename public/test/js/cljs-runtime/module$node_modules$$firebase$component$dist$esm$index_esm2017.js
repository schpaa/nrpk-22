shadow$provide.module$node_modules$$firebase$component$dist$esm$index_esm2017=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Provider=exports.ComponentContainer=exports.Component=void 0;var _util=require("module$node_modules$$firebase$util$dist$index_esm2017");class Component{constructor(name,instanceFactory,type){this.name=name;this.instanceFactory=instanceFactory;this.type=type;this.multipleInstances=!1;this.serviceProps={};this.instantiationMode=
"LAZY";this.onInstanceCreated=null}setInstantiationMode(mode){this.instantiationMode=mode;return this}setMultipleInstances(multipleInstances){this.multipleInstances=multipleInstances;return this}setServiceProps(props){this.serviceProps=props;return this}setInstanceCreatedCallback(callback){this.onInstanceCreated=callback;return this}}exports.Component=Component;class Provider{constructor(name,container){this.name=name;this.container=container;this.component=null;this.instances=new Map;this.instancesDeferred=
new Map;this.instancesOptions=new Map;this.onInitCallbacks=new Map}get(identifier){identifier=this.normalizeInstanceIdentifier(identifier);if(!this.instancesDeferred.has(identifier)){const deferred=new _util.Deferred;this.instancesDeferred.set(identifier,deferred);if(this.isInitialized(identifier)||this.shouldAutoInitialize())try{const instance=this.getOrInitializeService({instanceIdentifier:identifier});instance&&deferred.resolve(instance)}catch(e){}}return this.instancesDeferred.get(identifier).promise}getImmediate(options){var _a;
const normalizedIdentifier=this.normalizeInstanceIdentifier(null===options||void 0===options?void 0:options.identifier);options=null!==(_a=null===options||void 0===options?void 0:options.optional)&&void 0!==_a?_a:!1;if(this.isInitialized(normalizedIdentifier)||this.shouldAutoInitialize())try{return this.getOrInitializeService({instanceIdentifier:normalizedIdentifier})}catch(e){if(options)return null;throw e;}else{if(options)return null;throw Error(`Service ${this.name} is not available`);}}getComponent(){return this.component}setComponent(component){if(component.name!==
this.name)throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);this.component=component;if(this.shouldAutoInitialize()){if("EAGER"===component.instantiationMode)try{this.getOrInitializeService({instanceIdentifier:"[DEFAULT]"})}catch(e){}for(const [instanceIdentifier,instanceDeferred]of this.instancesDeferred.entries()){component=this.normalizeInstanceIdentifier(instanceIdentifier);try{const instance=
this.getOrInitializeService({instanceIdentifier:component});instanceDeferred.resolve(instance)}catch(e){}}}}clearInstance(identifier="[DEFAULT]"){this.instancesDeferred.delete(identifier);this.instancesOptions.delete(identifier);this.instances.delete(identifier)}delete(){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){const services=Array.from($jscomp$async$this.instances.values());yield Promise.all([...services.filter(service=>"INTERNAL"in service).map(service=>
service.INTERNAL.delete()),...services.filter(service=>"_delete"in service).map(service=>service._delete())])})}isComponentSet(){return null!=this.component}isInitialized(identifier="[DEFAULT]"){return this.instances.has(identifier)}getOptions(identifier="[DEFAULT]"){return this.instancesOptions.get(identifier)||{}}initialize(opts={}){var {options={}}=opts;opts=this.normalizeInstanceIdentifier(opts.instanceIdentifier);if(this.isInitialized(opts))throw Error(`${this.name}(${opts}) has already been initialized`);
if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);options=this.getOrInitializeService({instanceIdentifier:opts,options});for(const [instanceIdentifier,instanceDeferred]of this.instancesDeferred.entries()){const normalizedDeferredIdentifier=this.normalizeInstanceIdentifier(instanceIdentifier);opts===normalizedDeferredIdentifier&&instanceDeferred.resolve(options)}return options}onInit(callback,identifier){var _a;identifier=this.normalizeInstanceIdentifier(identifier);
const existingCallbacks=null!==(_a=this.onInitCallbacks.get(identifier))&&void 0!==_a?_a:new Set;existingCallbacks.add(callback);this.onInitCallbacks.set(identifier,existingCallbacks);(_a=this.instances.get(identifier))&&callback(_a,identifier);return()=>{existingCallbacks.delete(callback)}}invokeOnInitCallbacks(instance,identifier){const callbacks=this.onInitCallbacks.get(identifier);if(callbacks)for(const callback of callbacks)try{callback(instance,identifier)}catch(_a){}}getOrInitializeService({instanceIdentifier,
options={}}){let instance=this.instances.get(instanceIdentifier);if(!instance&&this.component&&(instance=this.component.instanceFactory(this.container,{instanceIdentifier:"[DEFAULT]"===instanceIdentifier?void 0:instanceIdentifier,options}),this.instances.set(instanceIdentifier,instance),this.instancesOptions.set(instanceIdentifier,options),this.invokeOnInitCallbacks(instance,instanceIdentifier),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,instanceIdentifier,
instance)}catch(_a){}return instance||null}normalizeInstanceIdentifier(identifier="[DEFAULT]"){return this.component?this.component.multipleInstances?identifier:"[DEFAULT]":identifier}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}exports.Provider=Provider;class ComponentContainer{constructor(name){this.name=name;this.providers=new Map}addComponent(component){const provider=this.getProvider(component.name);if(provider.isComponentSet())throw Error(`Component ${component.name} has already been registered with ${this.name}`);
provider.setComponent(component)}addOrOverwriteComponent(component){this.getProvider(component.name).isComponentSet()&&this.providers.delete(component.name);this.addComponent(component)}getProvider(name){if(this.providers.has(name))return this.providers.get(name);const provider=new Provider(name,this);this.providers.set(name,provider);return provider}getProviders(){return Array.from(this.providers.values())}}exports.ComponentContainer=ComponentContainer}
//# sourceMappingURL=module$node_modules$$firebase$component$dist$esm$index_esm2017.js.map
