{"version":3,"sources":["db/rtdb.cljs"],"mappings":"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","names":["p__73399","map__73400","cljs.core/--destructure-map","cljs.core.get","db.rtdb/on-value-reaction","path","args","ref","js/module$node_modules$firebase$database$dist$index_esm.ref","js/module$node_modules$firebase$database$dist$index_esm.getDatabase","cljs.core.apply","cljs.core/str","cljs.core.interpose","reaction","reagent.core.atom","callback","snap","cljs.core/reset!","G__73408","cljs-bean.core/->clj","js/module$node_modules$firebase$database$dist$index_esm.onValue","reagent.ratom.make_reaction","cljs.core/deref","js/module$node_modules$firebase$database$dist$index_esm.off","p__73409","map__73413","db.rtdb/ref-get","value","js/module$node_modules$firebase$database$dist$index_esm.get","cljs-bean.core/->js","snapshot","result","cljs.core/tap>","p__73418","map__73419","db.rtdb/ref-set","js/module$node_modules$firebase$database$dist$index_esm.set","p__73420","map__73421","db.rtdb/ref-update","js/module$node_modules$firebase$database$dist$index_esm.update","p__73426","map__73427","db.rtdb/database-update-increment","field","delta","js/module$node_modules$firebase$database$dist$index_esm.increment","p__73433","map__73434","db.rtdb/ref-push","js/module$node_modules$firebase$database$dist$index_esm.push"],"sourcesContent":["(ns db.rtdb\n  (:require [reagent.ratom :as ratom]\n            [reagent.core :as r]\n            [cljs-bean.core :refer [->clj ->js]]\n    ;[promesa.core :as p]\n            [\"firebase/database\" :as rtdb :refer [ServerValue increment\n                                                  getDatabase ref onValue off set push get]]))\n\n(defn on-value-reaction\n  \"returns a reagent atom that will always have the latest value at 'path' in the Firebase database\"\n  [{:keys [path] :as args}]\n  (let [ref ^js (ref (getDatabase) (apply str (interpose \"/\" path)))\n        reaction (r/atom nil)\n        callback (fn [^js snap] (reset! reaction (some-> snap (.val) ->clj)))]\n    (onValue ref callback)\n    (ratom/make-reaction\n      (fn [] @reaction)\n      :on-dispose #(off ref \"value\" callback))))\n\n(defn ref-get [{:keys [path] :as args}]\n  (let [path (apply str (interpose \"/\" path))\n        value (r/atom nil)]\n    (-> (rtdb/get (ref (getDatabase) path) (->js value))\n        (.then (fn [^js snapshot]\n                 (if (.exists snapshot)\n                   (let [result (->clj (.val snapshot))]\n                     (reset! value result))\n                   (do\n                     (reset! value nil))))))\n    (ratom/make-reaction\n      (fn [] @value)\n      :on-dispose #(tap> \"disposed a ref-get\"))))\n\n;todo error-handling\n(defn ref-set [{:keys [path value] :as args}]\n\n  (let [path (apply str (interpose \"/\" path))]\n    (rtdb/set (ref (getDatabase) path) (->js value))))\n\n(defn ref-update [{:keys [path value] :as args}]\n\n  (let [path (apply str (interpose \"/\" path))]\n    (rtdb/update (ref (getDatabase) path) (->js value))))\n\n(defn database-update-increment\n  \"useful with stars\"\n  [{:keys [path field delta] :as args}]\n  (ref-update {:path  path\n               :value {field (increment delta)}})\n  #_(let [path (apply str (interpose \"/\" path))]\n      (rtdb/update (ref (getDatabase) path) (->js {field (increment delta)}))))\n\n(defn ref-push [{:keys [path value] :as args}]\n  (let [path (apply str (interpose \"/\" path))]\n    (rtdb/push (ref (getDatabase) path) (->js value))))\n\n(comment\n  (do\n    (ref-update {:path  [\"boat-brand\" \"-Me9qGEbhySlJwJtsDV0\"]\n                 :value {:star-count (increment 1)}})))\n"]}