{"version":3,"sources":["cljc/java_time/offset_time.cljs"],"mappings":"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","names":["cljc.java-time.offset-time/min","cljc.java_time.offset_time.goog$module$goog$object.get","java.time/OffsetTime","cljc.java-time.offset-time/max","cljc.java-time.offset-time/minus-minutes","this13578","long13579","cljc.java-time.offset-time/truncated-to","this13580","java-time-temporal-TemporalUnit13581","cljc.java-time.offset-time/range","this13582","java-time-temporal-TemporalField13583","cljc.java-time.offset-time/get-hour","this13584","cljc.java-time.offset-time/minus-hours","this13585","long13586","var_args","G__74285","cljc.java-time.offset-time/of","js/Error","java-time-LocalTime13587","java-time-ZoneOffset13588","cljs.core.js_invoke","int13589","int13590","int13591","int13592","java-time-ZoneOffset13593","cljc.java-time.offset-time/is-equal","this13594","java-time-OffsetTime13595","cljc.java-time.offset-time/get-nano","this13596","cljc.java-time.offset-time/minus-seconds","this13597","long13598","cljc.java-time.offset-time/get-second","this13599","cljc.java-time.offset-time/plus-nanos","this13600","long13601","G__74296","cljc.java-time.offset-time/plus","this13602","java-time-temporal-TemporalAmount13603","this13604","long13605","java-time-temporal-TemporalUnit13606","cljc.java-time.offset-time/with-hour","this13607","int13608","cljc.java-time.offset-time/with-minute","this13609","int13610","cljc.java-time.offset-time/plus-minutes","this13611","long13612","cljc.java-time.offset-time/query","this13613","java-time-temporal-TemporalQuery13614","cljc.java-time.offset-time/at-date","this13615","java-time-LocalDate13616","cljc.java-time.offset-time/with-offset-same-instant","this13617","java-time-ZoneOffset13618","cljc.java-time.offset-time/to-string","this13619","cljc.java-time.offset-time/is-before","this13620","java-time-OffsetTime13621","G__74303","cljc.java-time.offset-time/minus","this13622","long13623","java-time-temporal-TemporalUnit13624","this13625","java-time-temporal-TemporalAmount13626","cljc.java-time.offset-time/plus-hours","this13627","long13628","cljc.java-time.offset-time/to-local-time","this13629","cljc.java-time.offset-time/get-long","this13630","java-time-temporal-TemporalField13631","cljc.java-time.offset-time/get-offset","this13632","cljc.java-time.offset-time/with-nano","this13633","int13634","cljc.java-time.offset-time/until","this13635","java-time-temporal-Temporal13636","java-time-temporal-TemporalUnit13637","cljc.java-time.offset-time/with-offset-same-local","this13638","java-time-ZoneOffset13639","cljc.java-time.offset-time/from","java-time-temporal-TemporalAccessor13640","cljc.java-time.offset-time/is-after","this13641","java-time-OffsetTime13642","cljc.java-time.offset-time/minus-nanos","this13643","long13644","cljc.java-time.offset-time/is-supported","this13645","G__13646","G__74315","cljc.java-time.offset-time/parse","java-lang-CharSequence13647","java-lang-CharSequence13648","java-time-format-DateTimeFormatter13649","cljc.java-time.offset-time/with-second","this13650","int13651","cljc.java-time.offset-time/get-minute","this13652","cljc.java-time.offset-time/hash-code","this13653","cljc.java-time.offset-time/adjust-into","this13654","java-time-temporal-Temporal13655","G__74327","cljc.java-time.offset-time/with","this13656","java-time-temporal-TemporalField13657","long13658","this13659","java-time-temporal-TemporalAdjuster13660","G__74332","cljc.java-time.offset-time/now","cljs.core/js-invoke","G__13662","cljc.java-time.offset-time/compare-to","this13663","java-time-OffsetTime13664","cljc.java-time.offset-time/of-instant","java-time-Instant13665","java-time-ZoneId13666","cljc.java-time.offset-time/plus-seconds","this13667","long13668","cljc.java-time.offset-time/get","this13669","java-time-temporal-TemporalField13670","cljc.java-time.offset-time/equals","this13671","java-lang-Object13672","cljc.java-time.offset-time/format","this13673","java-time-format-DateTimeFormatter13674"],"sourcesContent":["(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [goog.object] [java.time :refer [OffsetTime]]))\n(def min (goog.object/get java.time.OffsetTime \"MIN\"))\n(def max (goog.object/get java.time.OffsetTime \"MAX\"))\n(clojure.core/defn minus-minutes {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13578 ^long long13579] (.minusMinutes this13578 long13579)))\n(clojure.core/defn truncated-to {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalUnit\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13580 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13581] (.truncatedTo this13580 java-time-temporal-TemporalUnit13581)))\n(clojure.core/defn range {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this13582 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13583] (.range this13582 java-time-temporal-TemporalField13583)))\n(clojure.core/defn get-hour {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13584] (.hour this13584)))\n(clojure.core/defn minus-hours {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13585 ^long long13586] (.minusHours this13585 long13586)))\n(clojure.core/defn of {:arglists (quote ([\"java.time.LocalTime\" \"java.time.ZoneOffset\"] [\"int\" \"int\" \"int\" \"int\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime13587 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13588] (js-invoke java.time.OffsetTime \"of\" java-time-LocalTime13587 java-time-ZoneOffset13588)) (^js/JSJoda.OffsetTime [^int int13589 ^int int13590 ^int int13591 ^int int13592 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13593] (js-invoke java.time.OffsetTime \"of\" int13589 int13590 int13591 int13592 java-time-ZoneOffset13593)))\n(clojure.core/defn is-equal {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this13594 ^js/JSJoda.OffsetTime java-time-OffsetTime13595] (.isEqual this13594 java-time-OffsetTime13595)))\n(clojure.core/defn get-nano {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13596] (.nano this13596)))\n(clojure.core/defn minus-seconds {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13597 ^long long13598] (.minusSeconds this13597 long13598)))\n(clojure.core/defn get-second {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13599] (.second this13599)))\n(clojure.core/defn plus-nanos {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13600 ^long long13601] (.plusNanos this13600 long13601)))\n(clojure.core/defn plus {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalAmount\"] [\"java.time.OffsetTime\" \"long\" \"java.time.temporal.TemporalUnit\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13602 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13603] (.plus this13602 java-time-temporal-TemporalAmount13603)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13604 ^long long13605 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13606] (.plus this13604 long13605 java-time-temporal-TemporalUnit13606)))\n(clojure.core/defn with-hour {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13607 ^int int13608] (.withHour this13607 int13608)))\n(clojure.core/defn with-minute {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13609 ^int int13610] (.withMinute this13609 int13610)))\n(clojure.core/defn plus-minutes {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13611 ^long long13612] (.plusMinutes this13611 long13612)))\n(clojure.core/defn query {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this13613 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery13614] (.query this13613 java-time-temporal-TemporalQuery13614)))\n(clojure.core/defn at-date {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.LocalDate\"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this13615 ^js/JSJoda.LocalDate java-time-LocalDate13616] (.atDate this13615 java-time-LocalDate13616)))\n(clojure.core/defn with-offset-same-instant {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13617 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13618] (.withOffsetSameInstant this13617 java-time-ZoneOffset13618)))\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.OffsetTime\"]))} (^java.lang.String [^js/JSJoda.OffsetTime this13619] (.toString this13619)))\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this13620 ^js/JSJoda.OffsetTime java-time-OffsetTime13621] (.isBefore this13620 java-time-OffsetTime13621)))\n(clojure.core/defn minus {:arglists (quote ([\"java.time.OffsetTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalAmount\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13622 ^long long13623 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13624] (.minus this13622 long13623 java-time-temporal-TemporalUnit13624)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13625 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount13626] (.minus this13625 java-time-temporal-TemporalAmount13626)))\n(clojure.core/defn plus-hours {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13627 ^long long13628] (.plusHours this13627 long13628)))\n(clojure.core/defn to-local-time {:arglists (quote ([\"java.time.OffsetTime\"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this13629] (.toLocalTime this13629)))\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^long [^js/JSJoda.OffsetTime this13630 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13631] (.getLong this13630 java-time-temporal-TemporalField13631)))\n(clojure.core/defn get-offset {:arglists (quote ([\"java.time.OffsetTime\"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this13632] (.offset this13632)))\n(clojure.core/defn with-nano {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13633 ^int int13634] (.withNano this13633 int13634)))\n(clojure.core/defn until {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^js/JSJoda.OffsetTime this13635 ^js/JSJoda.Temporal java-time-temporal-Temporal13636 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit13637] (.until this13635 java-time-temporal-Temporal13636 java-time-temporal-TemporalUnit13637)))\n(clojure.core/defn with-offset-same-local {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13638 ^js/JSJoda.ZoneOffset java-time-ZoneOffset13639] (.withOffsetSameLocal this13638 java-time-ZoneOffset13639)))\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor13640] (js-invoke java.time.OffsetTime \"from\" java-time-temporal-TemporalAccessor13640)))\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this13641 ^js/JSJoda.OffsetTime java-time-OffsetTime13642] (.isAfter this13641 java-time-OffsetTime13642)))\n(clojure.core/defn minus-nanos {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13643 ^long long13644] (.minusNanos this13643 long13644)))\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalUnit\"]))} (^boolean [this13645 G__13646] (.isSupported ^js/JSJoda.OffsetTime this13645 G__13646)))\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\"] [\"java.lang.CharSequence\" \"java.time.format.DateTimeFormatter\"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13647] (js-invoke java.time.OffsetTime \"parse\" java-lang-CharSequence13647)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence13648 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13649] (js-invoke java.time.OffsetTime \"parse\" java-lang-CharSequence13648 java-time-format-DateTimeFormatter13649)))\n(clojure.core/defn with-second {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13650 ^int int13651] (.withSecond this13650 int13651)))\n(clojure.core/defn get-minute {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13652] (.minute this13652)))\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13653] (.hashCode this13653)))\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.Temporal\"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this13654 ^js/JSJoda.Temporal java-time-temporal-Temporal13655] (.adjustInto this13654 java-time-temporal-Temporal13655)))\n(clojure.core/defn with {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\" \"long\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalAdjuster\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13656 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13657 ^long long13658] (.with this13656 java-time-temporal-TemporalField13657 long13658)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13659 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster13660] (.with this13659 java-time-temporal-TemporalAdjuster13660)))\n(clojure.core/defn now {:arglists (quote ([] [\"java.time.ZoneId\"] [\"java.time.Clock\"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime \"now\")) (^js/JSJoda.OffsetTime [G__13662] (js-invoke java.time.OffsetTime \"now\" G__13662)))\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this13663 ^js/JSJoda.OffsetTime java-time-OffsetTime13664] (.compareTo this13663 java-time-OffsetTime13664)))\n(clojure.core/defn of-instant {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant13665 ^js/JSJoda.ZoneId java-time-ZoneId13666] (js-invoke java.time.OffsetTime \"ofInstant\" java-time-Instant13665 java-time-ZoneId13666)))\n(clojure.core/defn plus-seconds {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this13667 ^long long13668] (.plusSeconds this13667 long13668)))\n(clojure.core/defn get {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^int [^js/JSJoda.OffsetTime this13669 ^js/JSJoda.TemporalField java-time-temporal-TemporalField13670] (.get this13669 java-time-temporal-TemporalField13670)))\n(clojure.core/defn equals {:arglists (quote ([\"java.time.OffsetTime\" \"java.lang.Object\"]))} (^boolean [^js/JSJoda.OffsetTime this13671 ^java.lang.Object java-lang-Object13672] (.equals this13671 java-lang-Object13672)))\n(clojure.core/defn format {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.format.DateTimeFormatter\"]))} (^java.lang.String [^js/JSJoda.OffsetTime this13673 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter13674] (.format this13673 java-time-format-DateTimeFormatter13674)))\n"]}