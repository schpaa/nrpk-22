{"version":3,"sources":["schpaa/state.cljs"],"mappings":";AAOA;;;sBAAA,AAAAA,YAAA,sBAAA,xDAAaC;AAEb;;;wCAAA,xCAAMC,wFAEHC;AAFH,AAGE,OACEC,qBACAH,oBACA,4CAAA,2CAAA,6DAAgB,AAAA,2FAAWE;;AAE/B,uBAAA,vBAACE,2GAEC,WAAKC,KAAKC;AAAV,AACE,0DAAA,nDAACC,8CAAMF,yFACK,AAACG,6CAAK,AAACC,uBACD,iBAAAC,WAAS,AAAUP,qBAAgBH;AAAnC,AAAA,GAAA,CAAAU,YAAA;AAAA;;AACS,6DAAAA,tDAACC;;;;AAEhC,AAAKC,gCACH,AAACC,oBAASZ;AAEZ,yCAAA,zCAAKa,4HACFF;AAMH,yDAAA,8EAAA,vIAACG,0NAEED,+CACD,kBAAAE,PAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASX;UAAT,AAAAY,4CAAAD,WAAA,IAAA,jEAAWG;QAAX,AAAAF,4CAAAD,WAAA,IAAA,/DAAeI;AAAf,AACE,WAAA,mFAAA,6DAAA,vJAAMC,+MAAuBF;AAA7B,AACE,GAAI,GAAA,MAAA,LAAOC;AACT,OAACE,mBAASJ,OAAGG,KAAKD;;AAClB,OAACG,kDAAUL,OAAGG,KAAK,2DAAA,3DAACG,6CAAKC;;;AAEjC,2DAAA,3DAACC,yMAEC,kBAAAC,PAAKT;AAAL,AAAA,IAAAU,aAAAD;QAAA,AAAAV,4CAAAW,WAAA,IAAA,/DAASvB;UAAT,AAAAY,4CAAAW,WAAA,IAAA,jEAAWT;AAAX,AACE,6DAAA,mFAAA,6DAAA,tMAACU,+CAAOX,+MAAqBC;;AAEjC,yDAAA,4FAAA,rJAACL,wOAEED,+CACD,kBAAAiB,PAAKZ;AAAL,AAAA,IAAAa,aAAAD;QAAA,AAAAb,4CAAAc,WAAA,IAAA,/DAAS1B;UAAT,AAAAY,4CAAAc,WAAA,IAAA,jEAAWZ;QAAX,AAAAF,4CAAAc,WAAA,IAAA,/DAAeX;AAAf,AACE,WAAA,mFAAA,6DAAA,vJAAMC,+MAAuBF;AAA7B,AACE,OAACG,mBAASJ,OAAGG,KAAKD;;AAExB,sBAAA,tBAAMY,oDACHb;AADH,AAEE,6DAAA,mFAAA,zIAACc,qOAA6Bd;;AAEhC,yDAAA,mGAAA,5JAACL,+OAEED,+CACD,kBAAAqB,PAAKhB;AAAL,AAAA,IAAAiB,aAAAD;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAAS9B;UAAT,AAAAY,4CAAAkB,WAAA,IAAA,jEAAWhB;QAAX,AAAAF,4CAAAkB,WAAA,IAAA,/DAAef;AAAf,AACE,WAAA,mFAAA,1FAAMC;AAAN,AACE,sCAAA,/BAACC,mBAASJ,OAAGG;;AAMnB,yDAAA,qGAAA,9JAACP,iPAEED,+CACD,kBAAAuB,PAAKlB;AAAL,AAAA,IAAAmB,aAAAD;QAAA,AAAAnB,4CAAAoB,WAAA,IAAA,/DAAShC;SAAT,AAAAY,4CAAAoB,WAAA,IAAA,hEAAWC;AAAX,AACE,WAAA,mFAAA,6DAAA,vJAAMjB;AAAN,AACE,OAACE,kDAAUL,OAAGG,KAAK,WAAKkB;AAAL,AACE,GAAI,MAAA,LAAMA;AAAV,sDACID;;AACF,yDAAA,lDAACE,gDAAUD,iDAAID;;;;AAE5C,yDAAA,6GAAA,tKAACxB,yPAEED,+CACD,kBAAA4B,PAAKvB;AAAL,AAAA,IAAAwB,aAAAD;QAAA,AAAAxB,4CAAAyB,WAAA,IAAA,/DAASrC;SAAT,AAAAY,4CAAAyB,WAAA,IAAA,hEAAWJ;AAAX,AACE,WAAA,mFAAA,6DAAA,vJAAMjB;AAAN,AACE,OAACE,kDAAUL,OAAGG,KAAK,WAAKkB;AAAL,AACE,GAAI,GAAA,MAAA,LAAOA;AACT,8DAAA,vDAACI,qDAAeJ,iDAAID;;AADtB,sDAEIA;;;;AAG/B,2DAAA,3DAACZ,qMAEC,kBAAAkB,PAAK1B;AAAL,AAAA,IAAA2B,aAAAD;QAAA,AAAA3B,4CAAA4B,WAAA,IAAA,/DAASxC;SAAT,AAAAY,4CAAA4B,WAAA,IAAA,hEAAWP;AAAX,AACE,UAAA,4UAAA,3UAAO,eAAA,fAACQ,8DAAOR,KAAI,sDAAA,mFAAA,6DAAA,tMAACT,+CAAOX;;AAE/B,iCAAA,jCAAM6B,0EACHT;AADH,AAEE,6DAAA,mFAAA,zIAACL,iOAA2BK;;AAE9B,uCAAA,vCAAMU,sFAAmBV;AAAzB,AACE,8BAAA,mFAAA,1GAACW,+MAAiCX;;AAEpC,yCAAA,zCAAMY,0FAAqBZ;AAA3B,AACE,8BAAA,mFAAA,1GAACW,uNAAoCX;;AAEvC,yDAAA,4FAAA,rJAACxB,wOAEED,+CACD,kBAAAsC,PAAKjC;AAAL,AAAA,IAAAkC,aAAAD;QAAA,AAAAlC,4CAAAmC,WAAA,IAAA,/DAAS/C;UAAT,AAAAY,4CAAAmC,WAAA,IAAA,jEAAWjC;QAAX,AAAAF,4CAAAmC,WAAA,IAAA,/DAAehC;AAAf,AACE,WAAA,mFAAA,6DAAA,vJAAMC;AAAN,AACE,sCAAA,/BAACC,mBAASJ,OAAGG;;AAEnB,sCAAA,tCAAMgC;AAAN,AACE,8BAAA,mFAAA,1GAACJ;;AAMH,sBAAA,tBAAMK,oDAAQnC;AAAd,AACE,8BAAA,mFAAA,1GAAC8B,wLAAqB9B;;AAExB,sBAAA,tBAAMoC,oDAAQpC,IAAIC;AAAlB,AACE,8BAAA,mFAAA,1GAAC6B,sMAA4B9B,IAAIC;;AAEnC,qBAAA,rBAAMoC,kDAAOrC;AAAb,AACE,8BAAA,mFAAA,gGAAA,1MAAC8B,sMAA4B9B","names":["js/goog.define","schpaa.state/ls-key","schpaa.state/settings->local-store","app-db","js/localStorage","re-frame.core/reg-cofx","cofx","_","cljs.core.assoc","cljs.core.into","cljs.core/sorted-map","G__74651","cljs.reader.read_string","schpaa.state/->local-store","re-frame.core/after","schpaa.state/localstorage-interceptors","re_frame.core.reg_event_db","p__74654","vec__74655","cljs.core.nth","db","tag","v","path","cljs.core/assoc-in","cljs.core.update_in","cljs.core.fnil","cljs.core/not","re_frame.core.reg_sub","p__74662","vec__74663","cljs.core.get_in","p__74666","vec__74667","schpaa.state/listen","re_frame.core.subscribe","p__74674","vec__74675","p__74679","vec__74680","id","e","clojure.set.union","p__74683","vec__74684","clojure.set.difference","p__74687","vec__74688","cljs.core/some","schpaa.state/help:listen","schpaa.state/help:mark-as-read","re-frame.core/dispatch","schpaa.state/help:restore-single","p__74692","vec__74693","schpaa.state/help:restore-all","schpaa.state/toggle","schpaa.state/change","schpaa.state/clear"],"sourcesContent":["(ns schpaa.state\n  (:require [re-frame.core :as rf]\n            [clojure.set :as set]\n            [cljs.reader :refer [read-string]]))\n\n;region local-storage and key\n\n(goog-define ls-key \"schpaa.state\")\n\n(defn settings->local-store\n  \"Puts settings into localStorage\"\n  [app-db]\n  (.setItem\n    js/localStorage\n    ls-key\n    (str {:settings (:settings app-db)})))\n\n(rf/reg-cofx\n  :local-store-settings\n  (fn [cofx _]\n    (assoc cofx :local-store-settings\n                (into (sorted-map)\n                      (some->> (.getItem js/localStorage ls-key)\n                               (read-string))))))\n\n(def ->local-store\n  (rf/after settings->local-store))\n\n(def localstorage-interceptors\n  [->local-store])\n\n;endregion\n\n;region state\n\n(rf/reg-event-db\n  ::state\n  [localstorage-interceptors]\n  (fn [db [_ tag v]]\n    (let [path [:settings :state tag]]\n      (if (some? v)\n        (assoc-in db path v)\n        (update-in db path (fnil not false))))))\n\n(rf/reg-sub\n  ::state-toggle\n  (fn [db [_ tag]]\n    (get-in db [:settings :state tag])))\n\n(rf/reg-event-db\n  ::change-state\n  [localstorage-interceptors]\n  (fn [db [_ tag v]]\n    (let [path [:settings :state tag]]\n      (assoc-in db path v))))\n\n(defn listen\n  [tag]\n  (rf/subscribe [::state-toggle tag]))\n\n(rf/reg-event-db\n  ::restore-settings\n  [localstorage-interceptors]\n  (fn [db [_ tag v]]\n    (let [path [:settings]]\n      (assoc-in db path nil))))\n\n;endregion\n\n;region help (not used yet)\n\n(rf/reg-event-db\n  ::mark-help-as-read\n  [localstorage-interceptors]\n  (fn [db [_ id]]\n    (let [path [:settings :help]]\n      (update-in db path (fn [e]\n                           (if (nil? e)\n                             #{id}\n                             (set/union e #{id})))))))\n\n(rf/reg-event-db\n  ::mark-help-to-restore\n  [localstorage-interceptors]\n  (fn [db [_ id]]\n    (let [path [:settings :help]]\n      (update-in db path (fn [e]\n                           (if (some? e)\n                             (set/difference e #{id})\n                             #{id}))))))\n\n\n(rf/reg-sub\n  ::state-help\n  (fn [db [_ id]]\n    (some? (some #{id} (get-in db [:settings :help])))))\n\n(defn help:listen\n  [id]\n  (rf/subscribe [::state-help id]))\n\n(defn help:mark-as-read [id]\n  (rf/dispatch [::mark-help-as-read id]))\n\n(defn help:restore-single [id]\n  (rf/dispatch [::mark-help-to-restore id]))\n\n(rf/reg-event-db\n  ::restore-help\n  [localstorage-interceptors]\n  (fn [db [_ tag v]]\n    (let [path [:settings :help]]\n      (assoc-in db path nil))))\n\n(defn help:restore-all []\n  (rf/dispatch [::restore-help]))\n\n;endregion\n\n;region\n\n(defn toggle [tag]\n  (rf/dispatch [::state tag]))\n\n(defn change [tag v]\n  (rf/dispatch [::change-state tag v]))\n\n(defn clear [tag]\n  (rf/dispatch [::change-state tag nil]))\n\n;endregion"]}