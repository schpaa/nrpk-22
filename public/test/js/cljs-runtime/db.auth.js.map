{"version":3,"sources":["db/auth.cljs"],"mappings":";;AAOA,wBAAA,xBAAOA,wDAAgBC;AAAvB,AACE,oBAAMA;AAAN,AAAA,kDAAA,sEAAA,kFAAA,iEAAA,lKACiB,AAASA,+EACT,AAAYA,sEACZ,AAAOA,iFACP,AAAeA;;AAJhC;;;AAMF,oBAAA,pBAAMC;AAAN,AAEE,IAAMC,aAAW,gDAAA,hDAACC;IACZC,WAAS,WAAKJ;AAAL,AAEE,IAAMK,YAAU,AAACN,sBAAWC;AAA5B,AAEE,GAAM,0DAAA,AAAAM,1DAACC,gDAAKF,0BAAWH;AAAvB,AACE,GAAI,cAAA,bAAMG;AACR,AACE,AAACG,qBAAS,AAAA,kFAAA,AAAAF,gBAAOJ;;AACjB,OAACO,sBAAOP,WAAWG;;AACrB,GAAI,CAAA,AAAAC,+BAAA,fAAOJ;AACT,AACE,AAACO,sBAAOP,WAAWG;;AACnB,OAACG,qBAAS,AAAA,kFAAMH;;AAHpB;;;;AALJ;;;IAWbK,iBAAe,WAAKC;AAAL,AAAQ,OAACF,sBAAOP,WAAWS;;AAhBhD,AAiBE,AAACC,oEAAuC,AAACC,2DAAST,SAASM;;AAC3DR;;AAEJ,mBAAA,nBAAMY;AAAN,AACE,OAACC,yDAAQ,AAACF","names":["db.auth/user->data","user","db.auth/user-info","auth-state","reagent.core.atom","callback","user-data","cljs.core/deref","cljs.core.not_EQ_","db.presence/presence","cljs.core/reset!","error-callback","x","js/module$node_modules$firebase$auth$dist$index_esm.onAuthStateChanged","js/module$node_modules$firebase$auth$dist$index_esm.getAuth","db.auth/sign-out","js/module$node_modules$firebase$auth$dist$index_esm.signOut"],"sourcesContent":["(ns db.auth\n  (:require [\"firebase/auth\" :refer [getAuth onAuthStateChanged signOut\n                                     onIdTokenChanged]]\n            [db.presence :refer [presence]]\n            [reagent.core :as r]\n            [re-frame.core :as rf]))\n\n(defn- user->data [^js user]\n  (when user\n    {:email        (.-email user)\n     :photo-url    (.-photoURL user)\n     :uid          (.-uid user)\n     :display-name (.-displayName user)}))\n\n(defn user-info []\n  ;works!\n  (let [auth-state (r/atom nil)\n        callback (fn [user]\n\n                   (let [user-data (user->data user)]\n                     ;todo update presence data just as a sideeffect to aquiring the users status\n                     (when (not= user-data @auth-state)\n                       (if (nil? user-data)\n                         (do\n                           (presence (:uid @auth-state))\n                           (reset! auth-state user-data))\n                         (if (nil? @auth-state)\n                           (do\n                             (reset! auth-state user-data)\n                             (presence (:uid user-data))))))))\n\n\n        error-callback (fn [x] (reset! auth-state x))]\n    (onAuthStateChanged  #_onIdTokenChanged (getAuth) callback error-callback)\n    auth-state))\n\n(defn sign-out []\n  (signOut (getAuth))\n  #_(.reload js/window.location true)\n  #_(rf/dispatch [:app/navigate-to [:r.forsiden]]))\n\n\n"]}